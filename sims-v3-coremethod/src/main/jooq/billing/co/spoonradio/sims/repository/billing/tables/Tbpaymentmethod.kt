/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_PAYMENTMETHOD_ID
import co.spoonradio.sims.repository.billing.tables.records.TbpaymentmethodRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row12
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbpaymentmethod(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbpaymentmethodRecord>?,
    aliased: Table<TbpaymentmethodRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbpaymentmethodRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbPaymentMethod</code>
         */
        val TBPAYMENTMETHOD = Tbpaymentmethod()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbpaymentmethodRecord> = TbpaymentmethodRecord::class.java

    /**
     * The column <code>tbPaymentMethod.id</code>.
     */
    val ID: TableField<TbpaymentmethodRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbPaymentMethod.name</code>.
     */
    val NAME: TableField<TbpaymentmethodRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>tbPaymentMethod.pgId</code>.
     */
    val PGID: TableField<TbpaymentmethodRecord, Int?> = createField(DSL.name("pgId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbPaymentMethod.type</code>.
     */
    val TYPE: TableField<TbpaymentmethodRecord, Byte?> = createField(DSL.name("type"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>tbPaymentMethod.fee</code>.
     */
    val FEE: TableField<TbpaymentmethodRecord, Int?> = createField(DSL.name("fee"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbPaymentMethod.description</code>.
     */
    val DESCRIPTION: TableField<TbpaymentmethodRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "")

    /**
     * The column <code>tbPaymentMethod.isUse</code>.
     */
    val ISUSE: TableField<TbpaymentmethodRecord, Boolean?> = createField(DSL.name("isUse"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("TRUE", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>tbPaymentMethod.createdDate</code>.
     */
    val CREATEDDATE: TableField<TbpaymentmethodRecord, LocalDateTime?> = createField(DSL.name("createdDate"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPaymentMethod.updatedDate</code>.
     */
    val UPDATEDDATE: TableField<TbpaymentmethodRecord, LocalDateTime?> = createField(DSL.name("updatedDate"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>tbPaymentMethod.creator</code>.
     */
    val CREATOR: TableField<TbpaymentmethodRecord, Int?> = createField(DSL.name("creator"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbPaymentMethod.updater</code>.
     */
    val UPDATER: TableField<TbpaymentmethodRecord, Int?> = createField(DSL.name("updater"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>tbPaymentMethod.country</code>.
     */
    val COUNTRY: TableField<TbpaymentmethodRecord, String?> = createField(DSL.name("country"), SQLDataType.CHAR(2).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "")

    private constructor(alias: Name, aliased: Table<TbpaymentmethodRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbpaymentmethodRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbPaymentMethod</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbPaymentMethod</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbPaymentMethod</code> table reference
     */
    constructor(): this(DSL.name("tbPaymentMethod"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbpaymentmethodRecord>): this(Internal.createPathAlias(child, key), child, key, TBPAYMENTMETHOD, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbpaymentmethodRecord, Int?> = super.getIdentity() as Identity<TbpaymentmethodRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbpaymentmethodRecord> = PK_PAYMENTMETHOD_ID
    override fun getKeys(): List<UniqueKey<TbpaymentmethodRecord>> = listOf(PK_PAYMENTMETHOD_ID)
    override fun `as`(alias: String): Tbpaymentmethod = Tbpaymentmethod(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbpaymentmethod = Tbpaymentmethod(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbpaymentmethod = Tbpaymentmethod(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbpaymentmethod = Tbpaymentmethod(name, null)

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row12<Int?, String?, Int?, Byte?, Int?, String?, Boolean?, LocalDateTime?, LocalDateTime?, Int?, Int?, String?> = super.fieldsRow() as Row12<Int?, String?, Int?, Byte?, Int?, String?, Boolean?, LocalDateTime?, LocalDateTime?, Int?, Int?, String?>
}
