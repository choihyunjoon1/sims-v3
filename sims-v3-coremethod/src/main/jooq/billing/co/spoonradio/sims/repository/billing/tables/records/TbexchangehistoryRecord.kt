/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables.records


import co.spoonradio.sims.repository.billing.tables.Tbexchangehistory

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TbexchangehistoryRecord() : UpdatableRecordImpl<TbexchangehistoryRecord>(Tbexchangehistory.TBEXCHANGEHISTORY), Record4<Long?, Long?, String?, LocalDateTime?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var exchangeid: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var status: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var created: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, String?, LocalDateTime?> = super.fieldsRow() as Row4<Long?, Long?, String?, LocalDateTime?>
    override fun valuesRow(): Row4<Long?, Long?, String?, LocalDateTime?> = super.valuesRow() as Row4<Long?, Long?, String?, LocalDateTime?>
    override fun field1(): Field<Long?> = Tbexchangehistory.TBEXCHANGEHISTORY.ID
    override fun field2(): Field<Long?> = Tbexchangehistory.TBEXCHANGEHISTORY.EXCHANGEID
    override fun field3(): Field<String?> = Tbexchangehistory.TBEXCHANGEHISTORY.STATUS
    override fun field4(): Field<LocalDateTime?> = Tbexchangehistory.TBEXCHANGEHISTORY.CREATED
    override fun component1(): Long? = id
    override fun component2(): Long? = exchangeid
    override fun component3(): String? = status
    override fun component4(): LocalDateTime? = created
    override fun value1(): Long? = id
    override fun value2(): Long? = exchangeid
    override fun value3(): String? = status
    override fun value4(): LocalDateTime? = created

    override fun value1(value: Long?): TbexchangehistoryRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): TbexchangehistoryRecord {
        this.exchangeid = value
        return this
    }

    override fun value3(value: String?): TbexchangehistoryRecord {
        this.status = value
        return this
    }

    override fun value4(value: LocalDateTime?): TbexchangehistoryRecord {
        this.created = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: LocalDateTime?): TbexchangehistoryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised TbexchangehistoryRecord
     */
    constructor(id: Long? = null, exchangeid: Long? = null, status: String? = null, created: LocalDateTime? = null): this() {
        this.id = id
        this.exchangeid = exchangeid
        this.status = status
        this.created = created
    }
}
