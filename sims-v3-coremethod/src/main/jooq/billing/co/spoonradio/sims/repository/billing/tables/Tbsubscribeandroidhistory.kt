/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_SUBSCRIBE_ANDROID_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_SUBSCRIBE_ANDROID_HISTORY_ORDER_ID
import co.spoonradio.sims.repository.billing.tables.records.TbsubscribeandroidhistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbsubscribeandroidhistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbsubscribeandroidhistoryRecord>?,
    aliased: Table<TbsubscribeandroidhistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbsubscribeandroidhistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbSubscribeAndroidHistory</code>
         */
        val TBSUBSCRIBEANDROIDHISTORY = Tbsubscribeandroidhistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbsubscribeandroidhistoryRecord> = TbsubscribeandroidhistoryRecord::class.java

    /**
     * The column <code>tbSubscribeAndroidHistory.id</code>.
     */
    val ID: TableField<TbsubscribeandroidhistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.subscribeId</code>.
     */
    val SUBSCRIBEID: TableField<TbsubscribeandroidhistoryRecord, Int?> = createField(DSL.name("subscribeId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.txId</code>.
     */
    val TXID: TableField<TbsubscribeandroidhistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.orderId</code>.
     */
    val ORDERID: TableField<TbsubscribeandroidhistoryRecord, String?> = createField(DSL.name("orderId"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.status</code>.
     */
    val STATUS: TableField<TbsubscribeandroidhistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.createdDate</code>.
     */
    val CREATEDDATE: TableField<TbsubscribeandroidhistoryRecord, LocalDateTime?> = createField(DSL.name("createdDate"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.startDate</code>.
     */
    val STARTDATE: TableField<TbsubscribeandroidhistoryRecord, LocalDateTime?> = createField(DSL.name("startDate"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.expireDate</code>.
     */
    val EXPIREDATE: TableField<TbsubscribeandroidhistoryRecord, LocalDateTime?> = createField(DSL.name("expireDate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeAndroidHistory.updatedDate</code>.
     */
    val UPDATEDDATE: TableField<TbsubscribeandroidhistoryRecord, LocalDateTime?> = createField(DSL.name("updatedDate"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TbsubscribeandroidhistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbsubscribeandroidhistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbSubscribeAndroidHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbSubscribeAndroidHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbSubscribeAndroidHistory</code> table reference
     */
    constructor(): this(DSL.name("tbSubscribeAndroidHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbsubscribeandroidhistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBSUBSCRIBEANDROIDHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbsubscribeandroidhistoryRecord, Int?> = super.getIdentity() as Identity<TbsubscribeandroidhistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbsubscribeandroidhistoryRecord> = PK_SUBSCRIBE_ANDROID_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbsubscribeandroidhistoryRecord>> = listOf(PK_SUBSCRIBE_ANDROID_HISTORY_ID, UIDX_SUBSCRIBE_ANDROID_HISTORY_ORDER_ID)
    override fun `as`(alias: String): Tbsubscribeandroidhistory = Tbsubscribeandroidhistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbsubscribeandroidhistory = Tbsubscribeandroidhistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbsubscribeandroidhistory = Tbsubscribeandroidhistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbsubscribeandroidhistory = Tbsubscribeandroidhistory(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Int?, Int?, String?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row9<Int?, Int?, String?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?>
}
