/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_TOSS_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_ORDER_NO
import co.spoonradio.sims.repository.billing.tables.records.TbtosshistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbtosshistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbtosshistoryRecord>?,
    aliased: Table<TbtosshistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbtosshistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbTossHistory</code>
         */
        val TBTOSSHISTORY = Tbtosshistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbtosshistoryRecord> = TbtosshistoryRecord::class.java

    /**
     * The column <code>tbTossHistory.id</code>.
     */
    val ID: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbTossHistory.userAgent</code>.
     */
    val USERAGENT: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("userAgent"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.productDesc</code>.
     */
    val PRODUCTDESC: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("productDesc"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.status</code>.
     */
    val STATUS: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.txId</code>.
     */
    val TXID: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.orderNo</code>.
     */
    val ORDERNO: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("orderNo"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.payToken</code>.
     */
    val PAYTOKEN: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("payToken"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.approvalTime</code>.
     */
    val APPROVALTIME: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("approvalTime"), SQLDataType.VARCHAR(20).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.discountedAmount</code>.
     */
    val DISCOUNTEDAMOUNT: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("discountedAmount"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.paidPoint</code>.
     */
    val PAIDPOINT: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("paidPoint"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.paidAmount</code>.
     */
    val PAIDAMOUNT: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("paidAmount"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.payMethod</code>.
     */
    val PAYMETHOD: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("payMethod"), SQLDataType.VARCHAR(10).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.transactionId</code>.
     */
    val TRANSACTIONID: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("transactionId"), SQLDataType.VARCHAR(40).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.cardCompanyName</code>.
     */
    val CARDCOMPANYNAME: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("cardCompanyName"), SQLDataType.VARCHAR(5).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.cardCompanyCode</code>.
     */
    val CARDCOMPANYCODE: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("cardCompanyCode"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.cardAuthorizationNo</code>.
     */
    val CARDAUTHORIZATIONNO: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("cardAuthorizationNo"), SQLDataType.VARCHAR(8).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.spreadOut</code>.
     */
    val SPREADOUT: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("spreadOut"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.noInterest</code>.
     */
    val NOINTEREST: TableField<TbtosshistoryRecord, Boolean?> = createField(DSL.name("noInterest"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>tbTossHistory.salesCheckLinkUrl</code>.
     */
    val SALESCHECKLINKURL: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("salesCheckLinkUrl"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.cardMethodType</code>.
     */
    val CARDMETHODTYPE: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("cardMethodType"), SQLDataType.VARCHAR(10).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.cardNumber</code>.
     */
    val CARDNUMBER: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("cardNumber"), SQLDataType.VARCHAR(20).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.amount</code>.
     */
    val AMOUNT: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("amount"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.amountTaxfree</code>.
     */
    val AMOUNTTAXFREE: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("amountTaxfree"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.errorMsg</code>.
     */
    val ERRORMSG: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("errorMsg"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.errorCode</code>.
     */
    val ERRORCODE: TableField<TbtosshistoryRecord, String?> = createField(DSL.name("errorCode"), SQLDataType.VARCHAR(500).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbTossHistory.created</code>.
     */
    val CREATED: TableField<TbtosshistoryRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbTossHistory.productId</code>.
     */
    val PRODUCTID: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("productId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.promotionId</code>.
     */
    val PROMOTIONID: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("promotionId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.userId</code>.
     */
    val USERID: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.completed</code>.
     */
    val COMPLETED: TableField<TbtosshistoryRecord, LocalDateTime?> = createField(DSL.name("completed"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbTossHistory.quantity</code>.
     */
    val QUANTITY: TableField<TbtosshistoryRecord, Int?> = createField(DSL.name("quantity"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbTossHistory.updated</code>.
     */
    val UPDATED: TableField<TbtosshistoryRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<TbtosshistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbtosshistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbTossHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbTossHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbTossHistory</code> table reference
     */
    constructor(): this(DSL.name("tbTossHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbtosshistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBTOSSHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbtosshistoryRecord, Int?> = super.getIdentity() as Identity<TbtosshistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbtosshistoryRecord> = PK_TOSS_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbtosshistoryRecord>> = listOf(PK_TOSS_HISTORY_ID, UIDX_ORDER_NO)
    override fun `as`(alias: String): Tbtosshistory = Tbtosshistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbtosshistory = Tbtosshistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbtosshistory = Tbtosshistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbtosshistory = Tbtosshistory(name, null)
}
