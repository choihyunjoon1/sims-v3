/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_PAYPAL_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_PAYPAL_HISTORY_ORDER_ID
import co.spoonradio.sims.repository.billing.tables.records.TbpaypalhistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbpaypalhistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbpaypalhistoryRecord>?,
    aliased: Table<TbpaypalhistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbpaypalhistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbPaypalHistory</code>
         */
        val TBPAYPALHISTORY = Tbpaypalhistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbpaypalhistoryRecord> = TbpaypalhistoryRecord::class.java

    /**
     * The column <code>tbPaypalHistory.id</code>.
     */
    val ID: TableField<TbpaypalhistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbPaypalHistory.txId</code>.
     */
    val TXID: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.quantity</code>.
     */
    val QUANTITY: TableField<TbpaypalhistoryRecord, Int?> = createField(DSL.name("quantity"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPaypalHistory.status</code>.
     */
    val STATUS: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbPaypalHistory.userAgent</code>.
     */
    val USERAGENT: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("userAgent"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.updated</code>.
     */
    val UPDATED: TableField<TbpaypalhistoryRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>tbPaypalHistory.completed</code>.
     */
    val COMPLETED: TableField<TbpaypalhistoryRecord, LocalDateTime?> = createField(DSL.name("completed"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPaypalHistory.created</code>.
     */
    val CREATED: TableField<TbpaypalhistoryRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPaypalHistory.errorMessage</code>.
     */
    val ERRORMESSAGE: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("errorMessage"), SQLDataType.VARCHAR(128).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.amount</code>.
     */
    val AMOUNT: TableField<TbpaypalhistoryRecord, Double?> = createField(DSL.name("amount"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>tbPaypalHistory.itemName</code>.
     */
    val ITEMNAME: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("itemName"), SQLDataType.VARCHAR(80).nullable(false), this, "")

    /**
     * The column <code>tbPaypalHistory.countryCode</code>.
     */
    val COUNTRYCODE: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("countryCode"), SQLDataType.VARCHAR(4).nullable(false), this, "")

    /**
     * The column <code>tbPaypalHistory.detailCountryCode</code>.
     */
    val DETAILCOUNTRYCODE: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("detailCountryCode"), SQLDataType.VARCHAR(4).nullable(false), this, "")

    /**
     * The column <code>tbPaypalHistory.linkCapture</code>.
     */
    val LINKCAPTURE: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("linkCapture"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.linkApprove</code>.
     */
    val LINKAPPROVE: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("linkApprove"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.payerId</code>.
     */
    val PAYERID: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("payerId"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.grossAmount</code>.
     */
    val GROSSAMOUNT: TableField<TbpaypalhistoryRecord, Double?> = createField(DSL.name("grossAmount"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>tbPaypalHistory.feesAmount</code>.
     */
    val FEESAMOUNT: TableField<TbpaypalhistoryRecord, Double?> = createField(DSL.name("feesAmount"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>tbPaypalHistory.netAmount</code>.
     */
    val NETAMOUNT: TableField<TbpaypalhistoryRecord, Double?> = createField(DSL.name("netAmount"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>tbPaypalHistory.productId</code>.
     */
    val PRODUCTID: TableField<TbpaypalhistoryRecord, Int?> = createField(DSL.name("productId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPaypalHistory.promotionId</code>.
     */
    val PROMOTIONID: TableField<TbpaypalhistoryRecord, Int?> = createField(DSL.name("promotionId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPaypalHistory.userId</code>.
     */
    val USERID: TableField<TbpaypalhistoryRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPaypalHistory.paymentStatus</code>.
     */
    val PAYMENTSTATUS: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("paymentStatus"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.currency</code>.
     */
    val CURRENCY: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("currency"), SQLDataType.CHAR(3).defaultValue(DSL.field("NULL", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.paypalCaptureId</code>.
     */
    val PAYPALCAPTUREID: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("paypalCaptureId"), SQLDataType.VARCHAR(32).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPaypalHistory.orderId</code>.
     */
    val ORDERID: TableField<TbpaypalhistoryRecord, String?> = createField(DSL.name("orderId"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TbpaypalhistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbpaypalhistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbPaypalHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbPaypalHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbPaypalHistory</code> table reference
     */
    constructor(): this(DSL.name("tbPaypalHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbpaypalhistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBPAYPALHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbpaypalhistoryRecord, Int?> = super.getIdentity() as Identity<TbpaypalhistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbpaypalhistoryRecord> = PK_PAYPAL_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbpaypalhistoryRecord>> = listOf(PK_PAYPAL_HISTORY_ID, UIDX_PAYPAL_HISTORY_ORDER_ID)
    override fun `as`(alias: String): Tbpaypalhistory = Tbpaypalhistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbpaypalhistory = Tbpaypalhistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbpaypalhistory = Tbpaypalhistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbpaypalhistory = Tbpaypalhistory(name, null)
}
