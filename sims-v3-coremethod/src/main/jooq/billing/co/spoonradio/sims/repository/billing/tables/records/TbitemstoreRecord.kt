/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables.records


import co.spoonradio.sims.repository.billing.tables.Tbitemstore

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TbitemstoreRecord() : UpdatableRecordImpl<TbitemstoreRecord>(Tbitemstore.TBITEMSTORE), Record8<Long?, Int?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, Boolean?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var rewardid: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var productid: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var creator: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var updater: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var createddate: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    var updateddate: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var isuse: Boolean?
        set(value) = set(7, value)
        get() = get(7) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, Int?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, Boolean?> = super.fieldsRow() as Row8<Long?, Int?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, Boolean?>
    override fun valuesRow(): Row8<Long?, Int?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, Boolean?> = super.valuesRow() as Row8<Long?, Int?, Int?, Int?, Int?, LocalDateTime?, LocalDateTime?, Boolean?>
    override fun field1(): Field<Long?> = Tbitemstore.TBITEMSTORE.ID
    override fun field2(): Field<Int?> = Tbitemstore.TBITEMSTORE.REWARDID
    override fun field3(): Field<Int?> = Tbitemstore.TBITEMSTORE.PRODUCTID
    override fun field4(): Field<Int?> = Tbitemstore.TBITEMSTORE.CREATOR
    override fun field5(): Field<Int?> = Tbitemstore.TBITEMSTORE.UPDATER
    override fun field6(): Field<LocalDateTime?> = Tbitemstore.TBITEMSTORE.CREATEDDATE
    override fun field7(): Field<LocalDateTime?> = Tbitemstore.TBITEMSTORE.UPDATEDDATE
    override fun field8(): Field<Boolean?> = Tbitemstore.TBITEMSTORE.ISUSE
    override fun component1(): Long? = id
    override fun component2(): Int? = rewardid
    override fun component3(): Int? = productid
    override fun component4(): Int? = creator
    override fun component5(): Int? = updater
    override fun component6(): LocalDateTime? = createddate
    override fun component7(): LocalDateTime? = updateddate
    override fun component8(): Boolean? = isuse
    override fun value1(): Long? = id
    override fun value2(): Int? = rewardid
    override fun value3(): Int? = productid
    override fun value4(): Int? = creator
    override fun value5(): Int? = updater
    override fun value6(): LocalDateTime? = createddate
    override fun value7(): LocalDateTime? = updateddate
    override fun value8(): Boolean? = isuse

    override fun value1(value: Long?): TbitemstoreRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): TbitemstoreRecord {
        this.rewardid = value
        return this
    }

    override fun value3(value: Int?): TbitemstoreRecord {
        this.productid = value
        return this
    }

    override fun value4(value: Int?): TbitemstoreRecord {
        this.creator = value
        return this
    }

    override fun value5(value: Int?): TbitemstoreRecord {
        this.updater = value
        return this
    }

    override fun value6(value: LocalDateTime?): TbitemstoreRecord {
        this.createddate = value
        return this
    }

    override fun value7(value: LocalDateTime?): TbitemstoreRecord {
        this.updateddate = value
        return this
    }

    override fun value8(value: Boolean?): TbitemstoreRecord {
        this.isuse = value
        return this
    }

    override fun values(value1: Long?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: LocalDateTime?, value7: LocalDateTime?, value8: Boolean?): TbitemstoreRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised TbitemstoreRecord
     */
    constructor(id: Long? = null, rewardid: Int? = null, productid: Int? = null, creator: Int? = null, updater: Int? = null, createddate: LocalDateTime? = null, updateddate: LocalDateTime? = null, isuse: Boolean? = null): this() {
        this.id = id
        this.rewardid = rewardid
        this.productid = productid
        this.creator = creator
        this.updater = updater
        this.createddate = createddate
        this.updateddate = updateddate
        this.isuse = isuse
    }
}
