/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_PLAYSTORE_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_PLAYSTORE_HISTORY_ORDER_ID
import co.spoonradio.sims.repository.billing.tables.records.TbplaystorehistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbplaystorehistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbplaystorehistoryRecord>?,
    aliased: Table<TbplaystorehistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbplaystorehistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbPlaystoreHistory</code>
         */
        val TBPLAYSTOREHISTORY = Tbplaystorehistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbplaystorehistoryRecord> = TbplaystorehistoryRecord::class.java

    /**
     * The column <code>tbPlaystoreHistory.id</code>.
     */
    val ID: TableField<TbplaystorehistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbPlaystoreHistory.txId</code>.
     */
    val TXID: TableField<TbplaystorehistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.orderId</code>.
     */
    val ORDERID: TableField<TbplaystorehistoryRecord, String?> = createField(DSL.name("orderId"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.purchaseToken</code>.
     */
    val PURCHASETOKEN: TableField<TbplaystorehistoryRecord, String?> = createField(DSL.name("purchaseToken"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.purchaseState</code>.
     */
    val PURCHASESTATE: TableField<TbplaystorehistoryRecord, Int?> = createField(DSL.name("purchaseState"), SQLDataType.INTEGER.defaultValue(DSL.field("'0'", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.purchaseTime</code>.
     */
    val PURCHASETIME: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("purchaseTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.status</code>.
     */
    val STATUS: TableField<TbplaystorehistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbPlaystoreHistory.modelName</code>.
     */
    val MODELNAME: TableField<TbplaystorehistoryRecord, String?> = createField(DSL.name("modelName"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.buildNo</code>.
     */
    val BUILDNO: TableField<TbplaystorehistoryRecord, Int?> = createField(DSL.name("buildNo"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbPlaystoreHistory.requestTime</code>.
     */
    val REQUESTTIME: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("requestTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.verifyTime</code>.
     */
    val VERIFYTIME: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("verifyTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.consumeTime</code>.
     */
    val CONSUMETIME: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("consumeTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.created</code>.
     */
    val CREATED: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.productId</code>.
     */
    val PRODUCTID: TableField<TbplaystorehistoryRecord, Int?> = createField(DSL.name("productId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.userId</code>.
     */
    val USERID: TableField<TbplaystorehistoryRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbPlaystoreHistory.updated</code>.
     */
    val UPDATED: TableField<TbplaystorehistoryRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TbplaystorehistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbplaystorehistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbPlaystoreHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbPlaystoreHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbPlaystoreHistory</code> table reference
     */
    constructor(): this(DSL.name("tbPlaystoreHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbplaystorehistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBPLAYSTOREHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbplaystorehistoryRecord, Int?> = super.getIdentity() as Identity<TbplaystorehistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbplaystorehistoryRecord> = PK_PLAYSTORE_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbplaystorehistoryRecord>> = listOf(PK_PLAYSTORE_HISTORY_ID, UIDX_PLAYSTORE_HISTORY_ORDER_ID)
    override fun `as`(alias: String): Tbplaystorehistory = Tbplaystorehistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbplaystorehistory = Tbplaystorehistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbplaystorehistory = Tbplaystorehistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbplaystorehistory = Tbplaystorehistory(name, null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<Int?, String?, String?, String?, Int?, LocalDateTime?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?, Int?, LocalDateTime?> = super.fieldsRow() as Row16<Int?, String?, String?, String?, Int?, LocalDateTime?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?, Int?, LocalDateTime?>
}
