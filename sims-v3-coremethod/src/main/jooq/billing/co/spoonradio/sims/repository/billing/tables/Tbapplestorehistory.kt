/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.indexes.IDX_SECURITYKEY
import co.spoonradio.sims.repository.billing.keys.PK_APPLE_STORE_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_APPLE_STORE_TRANSACTION_ID
import co.spoonradio.sims.repository.billing.tables.records.TbapplestorehistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbapplestorehistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbapplestorehistoryRecord>?,
    aliased: Table<TbapplestorehistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbapplestorehistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbApplestoreHistory</code>
         */
        val TBAPPLESTOREHISTORY = Tbapplestorehistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbapplestorehistoryRecord> = TbapplestorehistoryRecord::class.java

    /**
     * The column <code>tbApplestoreHistory.id</code>.
     */
    val ID: TableField<TbapplestorehistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbApplestoreHistory.txId</code>.
     */
    val TXID: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbApplestoreHistory.transactionId</code>.
     */
    val TRANSACTIONID: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("transactionId"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>tbApplestoreHistory.transactionDate</code>.
     */
    val TRANSACTIONDATE: TableField<TbapplestorehistoryRecord, LocalDateTime?> = createField(DSL.name("transactionDate"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbApplestoreHistory.transactionState</code>.
     */
    val TRANSACTIONSTATE: TableField<TbapplestorehistoryRecord, Int?> = createField(DSL.name("transactionState"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbApplestoreHistory.transactionError</code>.
     */
    val TRANSACTIONERROR: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("transactionError"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>tbApplestoreHistory.receiptData</code>.
     */
    val RECEIPTDATA: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("receiptData"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>tbApplestoreHistory.status</code>.
     */
    val STATUS: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbApplestoreHistory.modelName</code>.
     */
    val MODELNAME: TableField<TbapplestorehistoryRecord, String?> = createField(DSL.name("modelName"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbApplestoreHistory.buildNo</code>.
     */
    val BUILDNO: TableField<TbapplestorehistoryRecord, Int?> = createField(DSL.name("buildNo"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbApplestoreHistory.requestTime</code>.
     */
    val REQUESTTIME: TableField<TbapplestorehistoryRecord, LocalDateTime?> = createField(DSL.name("requestTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbApplestoreHistory.consumeTime</code>.
     */
    val CONSUMETIME: TableField<TbapplestorehistoryRecord, LocalDateTime?> = createField(DSL.name("consumeTime"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbApplestoreHistory.created</code>.
     */
    val CREATED: TableField<TbapplestorehistoryRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbApplestoreHistory.productId</code>.
     */
    val PRODUCTID: TableField<TbapplestorehistoryRecord, Int?> = createField(DSL.name("productId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbApplestoreHistory.userId</code>.
     */
    val USERID: TableField<TbapplestorehistoryRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbApplestoreHistory.updated</code>.
     */
    val UPDATED: TableField<TbapplestorehistoryRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TbapplestorehistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbapplestorehistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbApplestoreHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbApplestoreHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbApplestoreHistory</code> table reference
     */
    constructor(): this(DSL.name("tbApplestoreHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbapplestorehistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBAPPLESTOREHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(IDX_SECURITYKEY)
    override fun getIdentity(): Identity<TbapplestorehistoryRecord, Int?> = super.getIdentity() as Identity<TbapplestorehistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbapplestorehistoryRecord> = PK_APPLE_STORE_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbapplestorehistoryRecord>> = listOf(PK_APPLE_STORE_HISTORY_ID, UIDX_APPLE_STORE_TRANSACTION_ID)
    override fun `as`(alias: String): Tbapplestorehistory = Tbapplestorehistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbapplestorehistory = Tbapplestorehistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbapplestorehistory = Tbapplestorehistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbapplestorehistory = Tbapplestorehistory(name, null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<Int?, String?, String?, LocalDateTime?, Int?, String?, String?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?, Int?, LocalDateTime?> = super.fieldsRow() as Row16<Int?, String?, String?, LocalDateTime?, Int?, String?, String?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?, Int?, LocalDateTime?>
}
