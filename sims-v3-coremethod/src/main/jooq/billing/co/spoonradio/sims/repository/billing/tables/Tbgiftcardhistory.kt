/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_GIFTCARD_HISTORY_ID
import co.spoonradio.sims.repository.billing.tables.records.TbgiftcardhistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbgiftcardhistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbgiftcardhistoryRecord>?,
    aliased: Table<TbgiftcardhistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbgiftcardhistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbGiftcardHistory</code>
         */
        val TBGIFTCARDHISTORY = Tbgiftcardhistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbgiftcardhistoryRecord> = TbgiftcardhistoryRecord::class.java

    /**
     * The column <code>tbGiftcardHistory.id</code>.
     */
    val ID: TableField<TbgiftcardhistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbGiftcardHistory.payMethod</code>.
     */
    val PAYMETHOD: TableField<TbgiftcardhistoryRecord, String?> = createField(DSL.name("payMethod"), SQLDataType.VARCHAR(10).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbGiftcardHistory.txId</code>.
     */
    val TXID: TableField<TbgiftcardhistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>tbGiftcardHistory.status</code>.
     */
    val STATUS: TableField<TbgiftcardhistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbGiftcardHistory.giftCardNumber</code>.
     */
    val GIFTCARDNUMBER: TableField<TbgiftcardhistoryRecord, String?> = createField(DSL.name("giftCardNumber"), SQLDataType.VARCHAR(16).nullable(false), this, "")

    /**
     * The column <code>tbGiftcardHistory.amount</code>.
     */
    val AMOUNT: TableField<TbgiftcardhistoryRecord, Int?> = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbGiftcardHistory.userId</code>.
     */
    val USERID: TableField<TbgiftcardhistoryRecord, Int?> = createField(DSL.name("userId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>tbGiftcardHistory.createdDate</code>.
     */
    val CREATEDDATE: TableField<TbgiftcardhistoryRecord, LocalDateTime?> = createField(DSL.name("createdDate"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<TbgiftcardhistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbgiftcardhistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbGiftcardHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbGiftcardHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbGiftcardHistory</code> table reference
     */
    constructor(): this(DSL.name("tbGiftcardHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbgiftcardhistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBGIFTCARDHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbgiftcardhistoryRecord, Int?> = super.getIdentity() as Identity<TbgiftcardhistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbgiftcardhistoryRecord> = PK_GIFTCARD_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbgiftcardhistoryRecord>> = listOf(PK_GIFTCARD_HISTORY_ID)
    override fun `as`(alias: String): Tbgiftcardhistory = Tbgiftcardhistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbgiftcardhistory = Tbgiftcardhistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbgiftcardhistory = Tbgiftcardhistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbgiftcardhistory = Tbgiftcardhistory(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, String?, String?, String?, String?, Int?, Int?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, String?, Int?, Int?, LocalDateTime?>
}
