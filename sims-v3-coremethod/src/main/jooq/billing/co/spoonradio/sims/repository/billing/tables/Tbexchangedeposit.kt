/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_EXCHANGEDEPOSIT_ID
import co.spoonradio.sims.repository.billing.tables.records.TbexchangedepositRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbexchangedeposit(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbexchangedepositRecord>?,
    aliased: Table<TbexchangedepositRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbexchangedepositRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbExchangeDeposit</code>
         */
        val TBEXCHANGEDEPOSIT = Tbexchangedeposit()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbexchangedepositRecord> = TbexchangedepositRecord::class.java

    /**
     * The column <code>tbExchangeDeposit.id</code>.
     */
    val ID: TableField<TbexchangedepositRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbExchangeDeposit.exchangeId</code>.
     */
    val EXCHANGEID: TableField<TbexchangedepositRecord, Long?> = createField(DSL.name("exchangeId"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.applicantName</code>.
     */
    val APPLICANTNAME: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("applicantName"), SQLDataType.VARCHAR(30).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.email</code>.
     */
    val EMAIL: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.phoneNumber</code>.
     */
    val PHONENUMBER: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("phoneNumber"), SQLDataType.VARCHAR(13).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.residentFirstNumber</code>.
     */
    val RESIDENTFIRSTNUMBER: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("residentFirstNumber"), SQLDataType.CHAR(44).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.residentLastNumber</code>.
     */
    val RESIDENTLASTNUMBER: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("residentLastNumber"), SQLDataType.CHAR(44).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.accountHolder</code>.
     */
    val ACCOUNTHOLDER: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("accountHolder"), SQLDataType.VARCHAR(30).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.exchangeBank</code>.
     */
    val EXCHANGEBANK: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("exchangeBank"), SQLDataType.CHAR(3).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.accountNumber</code>.
     */
    val ACCOUNTNUMBER: TableField<TbexchangedepositRecord, String?> = createField(DSL.name("accountNumber"), SQLDataType.CHAR(44).nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.isMinor</code>.
     */
    val ISMINOR: TableField<TbexchangedepositRecord, Boolean?> = createField(DSL.name("isMinor"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.isDifferentAccountHolder</code>.
     */
    val ISDIFFERENTACCOUNTHOLDER: TableField<TbexchangedepositRecord, Boolean?> = createField(DSL.name("isDifferentAccountHolder"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.privacyConsent</code>.
     */
    val PRIVACYCONSENT: TableField<TbexchangedepositRecord, Boolean?> = createField(DSL.name("privacyConsent"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.residentCollectionConsent</code>.
     */
    val RESIDENTCOLLECTIONCONSENT: TableField<TbexchangedepositRecord, Boolean?> = createField(DSL.name("residentCollectionConsent"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>tbExchangeDeposit.created</code>.
     */
    val CREATED: TableField<TbexchangedepositRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbExchangeDeposit.updated</code>.
     */
    val UPDATED: TableField<TbexchangedepositRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<TbexchangedepositRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbexchangedepositRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbExchangeDeposit</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbExchangeDeposit</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbExchangeDeposit</code> table reference
     */
    constructor(): this(DSL.name("tbExchangeDeposit"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbexchangedepositRecord>): this(Internal.createPathAlias(child, key), child, key, TBEXCHANGEDEPOSIT, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbexchangedepositRecord, Long?> = super.getIdentity() as Identity<TbexchangedepositRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<TbexchangedepositRecord> = PK_EXCHANGEDEPOSIT_ID
    override fun getKeys(): List<UniqueKey<TbexchangedepositRecord>> = listOf(PK_EXCHANGEDEPOSIT_ID)
    override fun `as`(alias: String): Tbexchangedeposit = Tbexchangedeposit(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbexchangedeposit = Tbexchangedeposit(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbexchangedeposit = Tbexchangedeposit(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbexchangedeposit = Tbexchangedeposit(name, null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<Long?, Long?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row16<Long?, Long?, String?, String?, String?, String?, String?, String?, String?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?, LocalDateTime?>
}
