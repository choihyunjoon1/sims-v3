/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.billing.tables


import co.spoonradio.sims.repository.billing.DefaultSchema
import co.spoonradio.sims.repository.billing.keys.PK_SUBSCRIBE_IOS_HISTORY_ID
import co.spoonradio.sims.repository.billing.keys.UIDX_SUBSCRIBE_IOS_HISTORY_TRANSACTION_ID
import co.spoonradio.sims.repository.billing.tables.records.TbsubscribeioshistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tbsubscribeioshistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbsubscribeioshistoryRecord>?,
    aliased: Table<TbsubscribeioshistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbsubscribeioshistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tbSubscribeIosHistory</code>
         */
        val TBSUBSCRIBEIOSHISTORY = Tbsubscribeioshistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbsubscribeioshistoryRecord> = TbsubscribeioshistoryRecord::class.java

    /**
     * The column <code>tbSubscribeIosHistory.id</code>.
     */
    val ID: TableField<TbsubscribeioshistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.subscribeId</code>.
     */
    val SUBSCRIBEID: TableField<TbsubscribeioshistoryRecord, Int?> = createField(DSL.name("subscribeId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.status</code>.
     */
    val STATUS: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.txId</code>.
     */
    val TXID: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("txId"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.receiptData</code>.
     */
    val RECEIPTDATA: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("receiptData"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.transactionId</code>.
     */
    val TRANSACTIONID: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("transactionId"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.webOrderLineItemId</code>.
     */
    val WEBORDERLINEITEMID: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("webOrderLineItemId"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.trialPeriod</code>.
     */
    val TRIALPERIOD: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("trialPeriod"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.inIntroOfferPeriod</code>.
     */
    val ININTROOFFERPERIOD: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("inIntroOfferPeriod"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.subscriptionGroupIdentifier</code>.
     */
    val SUBSCRIPTIONGROUPIDENTIFIER: TableField<TbsubscribeioshistoryRecord, String?> = createField(DSL.name("subscriptionGroupIdentifier"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.createdDate</code>.
     */
    val CREATEDDATE: TableField<TbsubscribeioshistoryRecord, LocalDateTime?> = createField(DSL.name("createdDate"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.startDate</code>.
     */
    val STARTDATE: TableField<TbsubscribeioshistoryRecord, LocalDateTime?> = createField(DSL.name("startDate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.expireDate</code>.
     */
    val EXPIREDATE: TableField<TbsubscribeioshistoryRecord, LocalDateTime?> = createField(DSL.name("expireDate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>tbSubscribeIosHistory.updatedDate</code>.
     */
    val UPDATEDDATE: TableField<TbsubscribeioshistoryRecord, LocalDateTime?> = createField(DSL.name("updatedDate"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TbsubscribeioshistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbsubscribeioshistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tbSubscribeIosHistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tbSubscribeIosHistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tbSubscribeIosHistory</code> table reference
     */
    constructor(): this(DSL.name("tbSubscribeIosHistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbsubscribeioshistoryRecord>): this(Internal.createPathAlias(child, key), child, key, TBSUBSCRIBEIOSHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TbsubscribeioshistoryRecord, Int?> = super.getIdentity() as Identity<TbsubscribeioshistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbsubscribeioshistoryRecord> = PK_SUBSCRIBE_IOS_HISTORY_ID
    override fun getKeys(): List<UniqueKey<TbsubscribeioshistoryRecord>> = listOf(PK_SUBSCRIBE_IOS_HISTORY_ID, UIDX_SUBSCRIBE_IOS_HISTORY_TRANSACTION_ID)
    override fun `as`(alias: String): Tbsubscribeioshistory = Tbsubscribeioshistory(DSL.name(alias), this)
    override fun `as`(alias: Name): Tbsubscribeioshistory = Tbsubscribeioshistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tbsubscribeioshistory = Tbsubscribeioshistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tbsubscribeioshistory = Tbsubscribeioshistory(name, null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<Int?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row14<Int?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?>
}
