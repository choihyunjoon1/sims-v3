/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.SpoonReward

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpoonRewardRecord() : UpdatableRecordImpl<SpoonRewardRecord>(SpoonReward.SPOON_REWARD), Record9<Int?, String?, String?, Long?, LocalDateTime?, Long?, LocalDateTime?, Long?, Short?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var title: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var type: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var spoonAmount: Long?
        set(value) = set(3, value)
        get() = get(3) as Long?

    var created: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var creator: Long?
        set(value) = set(5, value)
        get() = get(5) as Long?

    var updated: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var updater: Long?
        set(value) = set(7, value)
        get() = get(7) as Long?

    var pgId: Short?
        set(value) = set(8, value)
        get() = get(8) as Short?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Int?, String?, String?, Long?, LocalDateTime?, Long?, LocalDateTime?, Long?, Short?> = super.fieldsRow() as Row9<Int?, String?, String?, Long?, LocalDateTime?, Long?, LocalDateTime?, Long?, Short?>
    override fun valuesRow(): Row9<Int?, String?, String?, Long?, LocalDateTime?, Long?, LocalDateTime?, Long?, Short?> = super.valuesRow() as Row9<Int?, String?, String?, Long?, LocalDateTime?, Long?, LocalDateTime?, Long?, Short?>
    override fun field1(): Field<Int?> = SpoonReward.SPOON_REWARD.ID
    override fun field2(): Field<String?> = SpoonReward.SPOON_REWARD.TITLE
    override fun field3(): Field<String?> = SpoonReward.SPOON_REWARD.TYPE
    override fun field4(): Field<Long?> = SpoonReward.SPOON_REWARD.SPOON_AMOUNT
    override fun field5(): Field<LocalDateTime?> = SpoonReward.SPOON_REWARD.CREATED
    override fun field6(): Field<Long?> = SpoonReward.SPOON_REWARD.CREATOR
    override fun field7(): Field<LocalDateTime?> = SpoonReward.SPOON_REWARD.UPDATED
    override fun field8(): Field<Long?> = SpoonReward.SPOON_REWARD.UPDATER
    override fun field9(): Field<Short?> = SpoonReward.SPOON_REWARD.PG_ID
    override fun component1(): Int? = id
    override fun component2(): String? = title
    override fun component3(): String? = type
    override fun component4(): Long? = spoonAmount
    override fun component5(): LocalDateTime? = created
    override fun component6(): Long? = creator
    override fun component7(): LocalDateTime? = updated
    override fun component8(): Long? = updater
    override fun component9(): Short? = pgId
    override fun value1(): Int? = id
    override fun value2(): String? = title
    override fun value3(): String? = type
    override fun value4(): Long? = spoonAmount
    override fun value5(): LocalDateTime? = created
    override fun value6(): Long? = creator
    override fun value7(): LocalDateTime? = updated
    override fun value8(): Long? = updater
    override fun value9(): Short? = pgId

    override fun value1(value: Int?): SpoonRewardRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): SpoonRewardRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): SpoonRewardRecord {
        this.type = value
        return this
    }

    override fun value4(value: Long?): SpoonRewardRecord {
        this.spoonAmount = value
        return this
    }

    override fun value5(value: LocalDateTime?): SpoonRewardRecord {
        this.created = value
        return this
    }

    override fun value6(value: Long?): SpoonRewardRecord {
        this.creator = value
        return this
    }

    override fun value7(value: LocalDateTime?): SpoonRewardRecord {
        this.updated = value
        return this
    }

    override fun value8(value: Long?): SpoonRewardRecord {
        this.updater = value
        return this
    }

    override fun value9(value: Short?): SpoonRewardRecord {
        this.pgId = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Long?, value5: LocalDateTime?, value6: Long?, value7: LocalDateTime?, value8: Long?, value9: Short?): SpoonRewardRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised SpoonRewardRecord
     */
    constructor(id: Int? = null, title: String? = null, type: String? = null, spoonAmount: Long? = null, created: LocalDateTime? = null, creator: Long? = null, updated: LocalDateTime? = null, updater: Long? = null, pgId: Short? = null): this() {
        this.id = id
        this.title = title
        this.type = type
        this.spoonAmount = spoonAmount
        this.created = created
        this.creator = creator
        this.updated = updated
        this.updater = updater
        this.pgId = pgId
    }
}
