/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_98
import co.spoonradio.sims.repository.mysql.tables.records.VocBanshistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VocBanshistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, VocBanshistoryRecord>?,
    aliased: Table<VocBanshistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<VocBanshistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>voc_banshistory</code>
         */
        val VOC_BANSHISTORY = VocBanshistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VocBanshistoryRecord> = VocBanshistoryRecord::class.java

    /**
     * The column <code>voc_banshistory.bans_history_id</code>.
     */
    val BANS_HISTORY_ID: TableField<VocBanshistoryRecord, Int?> = createField(DSL.name("bans_history_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>voc_banshistory.bans_id</code>.
     */
    val BANS_ID: TableField<VocBanshistoryRecord, Long?> = createField(DSL.name("bans_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>voc_banshistory.bans_user_id</code>.
     */
    val BANS_USER_ID: TableField<VocBanshistoryRecord, Long?> = createField(DSL.name("bans_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>voc_banshistory.handler_user_id</code>.
     */
    val HANDLER_USER_ID: TableField<VocBanshistoryRecord, Long?> = createField(DSL.name("handler_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>voc_banshistory.handler_user_name</code>.
     */
    val HANDLER_USER_NAME: TableField<VocBanshistoryRecord, String?> = createField(DSL.name("handler_user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>voc_banshistory.create_dt</code>.
     */
    val CREATE_DT: TableField<VocBanshistoryRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<VocBanshistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<VocBanshistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>voc_banshistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>voc_banshistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>voc_banshistory</code> table reference
     */
    constructor(): this(DSL.name("voc_banshistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, VocBanshistoryRecord>): this(Internal.createPathAlias(child, key), child, key, VOC_BANSHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<VocBanshistoryRecord, Int?> = super.getIdentity() as Identity<VocBanshistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<VocBanshistoryRecord> = CONSTRAINT_98
    override fun getKeys(): List<UniqueKey<VocBanshistoryRecord>> = listOf(CONSTRAINT_98)
    override fun `as`(alias: String): VocBanshistory = VocBanshistory(DSL.name(alias), this)
    override fun `as`(alias: Name): VocBanshistory = VocBanshistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VocBanshistory = VocBanshistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VocBanshistory = VocBanshistory(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Long?, Long?, Long?, String?, LocalDateTime?> = super.fieldsRow() as Row6<Int?, Long?, Long?, Long?, String?, LocalDateTime?>
}
