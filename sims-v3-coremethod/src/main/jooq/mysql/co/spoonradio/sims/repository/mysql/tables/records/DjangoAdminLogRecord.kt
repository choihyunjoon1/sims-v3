/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.DjangoAdminLog

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DjangoAdminLogRecord() : UpdatableRecordImpl<DjangoAdminLogRecord>(DjangoAdminLog.DJANGO_ADMIN_LOG), Record8<Int?, LocalDateTime?, String?, String?, Int?, String?, Int?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var actionTime: LocalDateTime?
        set(value) = set(1, value)
        get() = get(1) as LocalDateTime?

    var objectId: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var objectRepr: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var actionFlag: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var changeMessage: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var contentTypeId: Int?
        set(value) = set(6, value)
        get() = get(6) as Int?

    var userId: Int?
        set(value) = set(7, value)
        get() = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, LocalDateTime?, String?, String?, Int?, String?, Int?, Int?> = super.fieldsRow() as Row8<Int?, LocalDateTime?, String?, String?, Int?, String?, Int?, Int?>
    override fun valuesRow(): Row8<Int?, LocalDateTime?, String?, String?, Int?, String?, Int?, Int?> = super.valuesRow() as Row8<Int?, LocalDateTime?, String?, String?, Int?, String?, Int?, Int?>
    override fun field1(): Field<Int?> = DjangoAdminLog.DJANGO_ADMIN_LOG.ID
    override fun field2(): Field<LocalDateTime?> = DjangoAdminLog.DJANGO_ADMIN_LOG.ACTION_TIME
    override fun field3(): Field<String?> = DjangoAdminLog.DJANGO_ADMIN_LOG.OBJECT_ID
    override fun field4(): Field<String?> = DjangoAdminLog.DJANGO_ADMIN_LOG.OBJECT_REPR
    override fun field5(): Field<Int?> = DjangoAdminLog.DJANGO_ADMIN_LOG.ACTION_FLAG
    override fun field6(): Field<String?> = DjangoAdminLog.DJANGO_ADMIN_LOG.CHANGE_MESSAGE
    override fun field7(): Field<Int?> = DjangoAdminLog.DJANGO_ADMIN_LOG.CONTENT_TYPE_ID
    override fun field8(): Field<Int?> = DjangoAdminLog.DJANGO_ADMIN_LOG.USER_ID
    override fun component1(): Int? = id
    override fun component2(): LocalDateTime? = actionTime
    override fun component3(): String? = objectId
    override fun component4(): String? = objectRepr
    override fun component5(): Int? = actionFlag
    override fun component6(): String? = changeMessage
    override fun component7(): Int? = contentTypeId
    override fun component8(): Int? = userId
    override fun value1(): Int? = id
    override fun value2(): LocalDateTime? = actionTime
    override fun value3(): String? = objectId
    override fun value4(): String? = objectRepr
    override fun value5(): Int? = actionFlag
    override fun value6(): String? = changeMessage
    override fun value7(): Int? = contentTypeId
    override fun value8(): Int? = userId

    override fun value1(value: Int?): DjangoAdminLogRecord {
        this.id = value
        return this
    }

    override fun value2(value: LocalDateTime?): DjangoAdminLogRecord {
        this.actionTime = value
        return this
    }

    override fun value3(value: String?): DjangoAdminLogRecord {
        this.objectId = value
        return this
    }

    override fun value4(value: String?): DjangoAdminLogRecord {
        this.objectRepr = value
        return this
    }

    override fun value5(value: Int?): DjangoAdminLogRecord {
        this.actionFlag = value
        return this
    }

    override fun value6(value: String?): DjangoAdminLogRecord {
        this.changeMessage = value
        return this
    }

    override fun value7(value: Int?): DjangoAdminLogRecord {
        this.contentTypeId = value
        return this
    }

    override fun value8(value: Int?): DjangoAdminLogRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Int?, value2: LocalDateTime?, value3: String?, value4: String?, value5: Int?, value6: String?, value7: Int?, value8: Int?): DjangoAdminLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised DjangoAdminLogRecord
     */
    constructor(id: Int? = null, actionTime: LocalDateTime? = null, objectId: String? = null, objectRepr: String? = null, actionFlag: Int? = null, changeMessage: String? = null, contentTypeId: Int? = null, userId: Int? = null): this() {
        this.id = id
        this.actionTime = actionTime
        this.objectId = objectId
        this.objectRepr = objectRepr
        this.actionFlag = actionFlag
        this.changeMessage = changeMessage
        this.contentTypeId = contentTypeId
        this.userId = userId
    }
}
