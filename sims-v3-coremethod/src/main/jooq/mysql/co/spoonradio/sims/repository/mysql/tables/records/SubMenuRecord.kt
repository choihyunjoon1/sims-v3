/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.SubMenu

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record21
import org.jooq.Row21
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SubMenuRecord() : UpdatableRecordImpl<SubMenuRecord>(SubMenu.SUB_MENU), Record21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?> {

    var subMenuId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var enName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var ord: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var api: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var apiMethod: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var apiDetail: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var menuTypeCd: String?
        set(value) = set(7, value)
        get() = get(7) as String?

    var spcAuth: Byte?
        set(value) = set(8, value)
        get() = get(8) as Byte?

    var spcAuthCd: String?
        set(value) = set(9, value)
        get() = get(9) as String?

    var createDt: LocalDateTime?
        set(value) = set(10, value)
        get() = get(10) as LocalDateTime?

    var updateDt: LocalDateTime?
        set(value) = set(11, value)
        get() = get(11) as LocalDateTime?

    var menuId: Int?
        set(value) = set(12, value)
        get() = get(12) as Int?

    var isCommon: Byte?
        set(value) = set(13, value)
        get() = get(13) as Byte?

    var isNs: Byte?
        set(value) = set(14, value)
        get() = get(14) as Byte?

    var menuAuthTypeCd: String?
        set(value) = set(15, value)
        get() = get(15) as String?

    var parentSubMenuId: Int?
        set(value) = set(16, value)
        get() = get(16) as Int?

    var enApiDetail: String?
        set(value) = set(17, value)
        get() = get(17) as String?

    var parentTabMenuId: Short?
        set(value) = set(18, value)
        get() = get(18) as Short?

    var countryFlag: Short?
        set(value) = set(19, value)
        get() = get(19) as Short?

    var isUsed: Byte?
        set(value) = set(20, value)
        get() = get(20) as Byte?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?> = super.fieldsRow() as Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?>
    override fun valuesRow(): Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?> = super.valuesRow() as Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?>
    override fun field1(): Field<Int?> = SubMenu.SUB_MENU.SUB_MENU_ID
    override fun field2(): Field<String?> = SubMenu.SUB_MENU.NAME
    override fun field3(): Field<String?> = SubMenu.SUB_MENU.EN_NAME
    override fun field4(): Field<Int?> = SubMenu.SUB_MENU.ORD
    override fun field5(): Field<String?> = SubMenu.SUB_MENU.API
    override fun field6(): Field<String?> = SubMenu.SUB_MENU.API_METHOD
    override fun field7(): Field<String?> = SubMenu.SUB_MENU.API_DETAIL
    override fun field8(): Field<String?> = SubMenu.SUB_MENU.MENU_TYPE_CD
    override fun field9(): Field<Byte?> = SubMenu.SUB_MENU.SPC_AUTH
    override fun field10(): Field<String?> = SubMenu.SUB_MENU.SPC_AUTH_CD
    override fun field11(): Field<LocalDateTime?> = SubMenu.SUB_MENU.CREATE_DT
    override fun field12(): Field<LocalDateTime?> = SubMenu.SUB_MENU.UPDATE_DT
    override fun field13(): Field<Int?> = SubMenu.SUB_MENU.MENU_ID
    override fun field14(): Field<Byte?> = SubMenu.SUB_MENU.IS_COMMON
    override fun field15(): Field<Byte?> = SubMenu.SUB_MENU.IS_NS
    override fun field16(): Field<String?> = SubMenu.SUB_MENU.MENU_AUTH_TYPE_CD
    override fun field17(): Field<Int?> = SubMenu.SUB_MENU.PARENT_SUB_MENU_ID
    override fun field18(): Field<String?> = SubMenu.SUB_MENU.EN_API_DETAIL
    override fun field19(): Field<Short?> = SubMenu.SUB_MENU.PARENT_TAB_MENU_ID
    override fun field20(): Field<Short?> = SubMenu.SUB_MENU.COUNTRY_FLAG
    override fun field21(): Field<Byte?> = SubMenu.SUB_MENU.IS_USED
    override fun component1(): Int? = subMenuId
    override fun component2(): String? = name
    override fun component3(): String? = enName
    override fun component4(): Int? = ord
    override fun component5(): String? = api
    override fun component6(): String? = apiMethod
    override fun component7(): String? = apiDetail
    override fun component8(): String? = menuTypeCd
    override fun component9(): Byte? = spcAuth
    override fun component10(): String? = spcAuthCd
    override fun component11(): LocalDateTime? = createDt
    override fun component12(): LocalDateTime? = updateDt
    override fun component13(): Int? = menuId
    override fun component14(): Byte? = isCommon
    override fun component15(): Byte? = isNs
    override fun component16(): String? = menuAuthTypeCd
    override fun component17(): Int? = parentSubMenuId
    override fun component18(): String? = enApiDetail
    override fun component19(): Short? = parentTabMenuId
    override fun component20(): Short? = countryFlag
    override fun component21(): Byte? = isUsed
    override fun value1(): Int? = subMenuId
    override fun value2(): String? = name
    override fun value3(): String? = enName
    override fun value4(): Int? = ord
    override fun value5(): String? = api
    override fun value6(): String? = apiMethod
    override fun value7(): String? = apiDetail
    override fun value8(): String? = menuTypeCd
    override fun value9(): Byte? = spcAuth
    override fun value10(): String? = spcAuthCd
    override fun value11(): LocalDateTime? = createDt
    override fun value12(): LocalDateTime? = updateDt
    override fun value13(): Int? = menuId
    override fun value14(): Byte? = isCommon
    override fun value15(): Byte? = isNs
    override fun value16(): String? = menuAuthTypeCd
    override fun value17(): Int? = parentSubMenuId
    override fun value18(): String? = enApiDetail
    override fun value19(): Short? = parentTabMenuId
    override fun value20(): Short? = countryFlag
    override fun value21(): Byte? = isUsed

    override fun value1(value: Int?): SubMenuRecord {
        this.subMenuId = value
        return this
    }

    override fun value2(value: String?): SubMenuRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): SubMenuRecord {
        this.enName = value
        return this
    }

    override fun value4(value: Int?): SubMenuRecord {
        this.ord = value
        return this
    }

    override fun value5(value: String?): SubMenuRecord {
        this.api = value
        return this
    }

    override fun value6(value: String?): SubMenuRecord {
        this.apiMethod = value
        return this
    }

    override fun value7(value: String?): SubMenuRecord {
        this.apiDetail = value
        return this
    }

    override fun value8(value: String?): SubMenuRecord {
        this.menuTypeCd = value
        return this
    }

    override fun value9(value: Byte?): SubMenuRecord {
        this.spcAuth = value
        return this
    }

    override fun value10(value: String?): SubMenuRecord {
        this.spcAuthCd = value
        return this
    }

    override fun value11(value: LocalDateTime?): SubMenuRecord {
        this.createDt = value
        return this
    }

    override fun value12(value: LocalDateTime?): SubMenuRecord {
        this.updateDt = value
        return this
    }

    override fun value13(value: Int?): SubMenuRecord {
        this.menuId = value
        return this
    }

    override fun value14(value: Byte?): SubMenuRecord {
        this.isCommon = value
        return this
    }

    override fun value15(value: Byte?): SubMenuRecord {
        this.isNs = value
        return this
    }

    override fun value16(value: String?): SubMenuRecord {
        this.menuAuthTypeCd = value
        return this
    }

    override fun value17(value: Int?): SubMenuRecord {
        this.parentSubMenuId = value
        return this
    }

    override fun value18(value: String?): SubMenuRecord {
        this.enApiDetail = value
        return this
    }

    override fun value19(value: Short?): SubMenuRecord {
        this.parentTabMenuId = value
        return this
    }

    override fun value20(value: Short?): SubMenuRecord {
        this.countryFlag = value
        return this
    }

    override fun value21(value: Byte?): SubMenuRecord {
        this.isUsed = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?, value5: String?, value6: String?, value7: String?, value8: String?, value9: Byte?, value10: String?, value11: LocalDateTime?, value12: LocalDateTime?, value13: Int?, value14: Byte?, value15: Byte?, value16: String?, value17: Int?, value18: String?, value19: Short?, value20: Short?, value21: Byte?): SubMenuRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        this.value13(value13)
        this.value14(value14)
        this.value15(value15)
        this.value16(value16)
        this.value17(value17)
        this.value18(value18)
        this.value19(value19)
        this.value20(value20)
        this.value21(value21)
        return this
    }

    /**
     * Create a detached, initialised SubMenuRecord
     */
    constructor(subMenuId: Int? = null, name: String? = null, enName: String? = null, ord: Int? = null, api: String? = null, apiMethod: String? = null, apiDetail: String? = null, menuTypeCd: String? = null, spcAuth: Byte? = null, spcAuthCd: String? = null, createDt: LocalDateTime? = null, updateDt: LocalDateTime? = null, menuId: Int? = null, isCommon: Byte? = null, isNs: Byte? = null, menuAuthTypeCd: String? = null, parentSubMenuId: Int? = null, enApiDetail: String? = null, parentTabMenuId: Short? = null, countryFlag: Short? = null, isUsed: Byte? = null): this() {
        this.subMenuId = subMenuId
        this.name = name
        this.enName = enName
        this.ord = ord
        this.api = api
        this.apiMethod = apiMethod
        this.apiDetail = apiDetail
        this.menuTypeCd = menuTypeCd
        this.spcAuth = spcAuth
        this.spcAuthCd = spcAuthCd
        this.createDt = createDt
        this.updateDt = updateDt
        this.menuId = menuId
        this.isCommon = isCommon
        this.isNs = isNs
        this.menuAuthTypeCd = menuAuthTypeCd
        this.parentSubMenuId = parentSubMenuId
        this.enApiDetail = enApiDetail
        this.parentTabMenuId = parentTabMenuId
        this.countryFlag = countryFlag
        this.isUsed = isUsed
    }
}
