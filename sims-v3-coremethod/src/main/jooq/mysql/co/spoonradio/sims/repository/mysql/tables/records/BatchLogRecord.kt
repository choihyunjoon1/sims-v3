/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.BatchLog

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BatchLogRecord() : UpdatableRecordImpl<BatchLogRecord>(BatchLog.BATCH_LOG), Record7<Int?, String?, String?, String?, LocalDateTime?, Byte?, Int?> {

    var batchLogId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var batchTypeCd: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var batchDetail: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var batchParameter: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var createDt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var isSuccess: Byte?
        set(value) = set(5, value)
        get() = get(5) as Byte?

    var cnt: Int?
        set(value) = set(6, value)
        get() = get(6) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, String?, String?, String?, LocalDateTime?, Byte?, Int?> = super.fieldsRow() as Row7<Int?, String?, String?, String?, LocalDateTime?, Byte?, Int?>
    override fun valuesRow(): Row7<Int?, String?, String?, String?, LocalDateTime?, Byte?, Int?> = super.valuesRow() as Row7<Int?, String?, String?, String?, LocalDateTime?, Byte?, Int?>
    override fun field1(): Field<Int?> = BatchLog.BATCH_LOG.BATCH_LOG_ID
    override fun field2(): Field<String?> = BatchLog.BATCH_LOG.BATCH_TYPE_CD
    override fun field3(): Field<String?> = BatchLog.BATCH_LOG.BATCH_DETAIL
    override fun field4(): Field<String?> = BatchLog.BATCH_LOG.BATCH_PARAMETER
    override fun field5(): Field<LocalDateTime?> = BatchLog.BATCH_LOG.CREATE_DT
    override fun field6(): Field<Byte?> = BatchLog.BATCH_LOG.IS_SUCCESS
    override fun field7(): Field<Int?> = BatchLog.BATCH_LOG.CNT
    override fun component1(): Int? = batchLogId
    override fun component2(): String? = batchTypeCd
    override fun component3(): String? = batchDetail
    override fun component4(): String? = batchParameter
    override fun component5(): LocalDateTime? = createDt
    override fun component6(): Byte? = isSuccess
    override fun component7(): Int? = cnt
    override fun value1(): Int? = batchLogId
    override fun value2(): String? = batchTypeCd
    override fun value3(): String? = batchDetail
    override fun value4(): String? = batchParameter
    override fun value5(): LocalDateTime? = createDt
    override fun value6(): Byte? = isSuccess
    override fun value7(): Int? = cnt

    override fun value1(value: Int?): BatchLogRecord {
        this.batchLogId = value
        return this
    }

    override fun value2(value: String?): BatchLogRecord {
        this.batchTypeCd = value
        return this
    }

    override fun value3(value: String?): BatchLogRecord {
        this.batchDetail = value
        return this
    }

    override fun value4(value: String?): BatchLogRecord {
        this.batchParameter = value
        return this
    }

    override fun value5(value: LocalDateTime?): BatchLogRecord {
        this.createDt = value
        return this
    }

    override fun value6(value: Byte?): BatchLogRecord {
        this.isSuccess = value
        return this
    }

    override fun value7(value: Int?): BatchLogRecord {
        this.cnt = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: LocalDateTime?, value6: Byte?, value7: Int?): BatchLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised BatchLogRecord
     */
    constructor(batchLogId: Int? = null, batchTypeCd: String? = null, batchDetail: String? = null, batchParameter: String? = null, createDt: LocalDateTime? = null, isSuccess: Byte? = null, cnt: Int? = null): this() {
        this.batchLogId = batchLogId
        this.batchTypeCd = batchTypeCd
        this.batchDetail = batchDetail
        this.batchParameter = batchParameter
        this.createDt = createDt
        this.isSuccess = isSuccess
        this.cnt = cnt
    }
}
