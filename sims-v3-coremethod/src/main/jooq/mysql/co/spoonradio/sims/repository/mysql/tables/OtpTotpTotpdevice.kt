/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_79
import co.spoonradio.sims.repository.mysql.tables.records.OtpTotpTotpdeviceRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OtpTotpTotpdevice(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OtpTotpTotpdeviceRecord>?,
    aliased: Table<OtpTotpTotpdeviceRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OtpTotpTotpdeviceRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>otp_totp_totpdevice</code>
         */
        val OTP_TOTP_TOTPDEVICE = OtpTotpTotpdevice()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OtpTotpTotpdeviceRecord> = OtpTotpTotpdeviceRecord::class.java

    /**
     * The column <code>otp_totp_totpdevice.id</code>.
     */
    val ID: TableField<OtpTotpTotpdeviceRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>otp_totp_totpdevice.name</code>.
     */
    val NAME: TableField<OtpTotpTotpdeviceRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.confirmed</code>.
     */
    val CONFIRMED: TableField<OtpTotpTotpdeviceRecord, Byte?> = createField(DSL.name("confirmed"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.key</code>.
     */
    val KEY: TableField<OtpTotpTotpdeviceRecord, String?> = createField(DSL.name("key"), SQLDataType.VARCHAR(80).nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.step</code>.
     */
    val STEP: TableField<OtpTotpTotpdeviceRecord, Int?> = createField(DSL.name("step"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.t0</code>.
     */
    val T0: TableField<OtpTotpTotpdeviceRecord, Long?> = createField(DSL.name("t0"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.digits</code>.
     */
    val DIGITS: TableField<OtpTotpTotpdeviceRecord, Int?> = createField(DSL.name("digits"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.tolerance</code>.
     */
    val TOLERANCE: TableField<OtpTotpTotpdeviceRecord, Int?> = createField(DSL.name("tolerance"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.drift</code>.
     */
    val DRIFT: TableField<OtpTotpTotpdeviceRecord, Short?> = createField(DSL.name("drift"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.last_t</code>.
     */
    val LAST_T: TableField<OtpTotpTotpdeviceRecord, Long?> = createField(DSL.name("last_t"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.user_id</code>.
     */
    val USER_ID: TableField<OtpTotpTotpdeviceRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.throttling_failure_count</code>.
     */
    val THROTTLING_FAILURE_COUNT: TableField<OtpTotpTotpdeviceRecord, Long?> = createField(DSL.name("throttling_failure_count"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>otp_totp_totpdevice.throttling_failure_timestamp</code>.
     */
    val THROTTLING_FAILURE_TIMESTAMP: TableField<OtpTotpTotpdeviceRecord, LocalDateTime?> = createField(DSL.name("throttling_failure_timestamp"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<OtpTotpTotpdeviceRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OtpTotpTotpdeviceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>otp_totp_totpdevice</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>otp_totp_totpdevice</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>otp_totp_totpdevice</code> table reference
     */
    constructor(): this(DSL.name("otp_totp_totpdevice"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OtpTotpTotpdeviceRecord>): this(Internal.createPathAlias(child, key), child, key, OTP_TOTP_TOTPDEVICE, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<OtpTotpTotpdeviceRecord, Int?> = super.getIdentity() as Identity<OtpTotpTotpdeviceRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<OtpTotpTotpdeviceRecord> = CONSTRAINT_79
    override fun getKeys(): List<UniqueKey<OtpTotpTotpdeviceRecord>> = listOf(CONSTRAINT_79)
    override fun `as`(alias: String): OtpTotpTotpdevice = OtpTotpTotpdevice(DSL.name(alias), this)
    override fun `as`(alias: Name): OtpTotpTotpdevice = OtpTotpTotpdevice(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OtpTotpTotpdevice = OtpTotpTotpdevice(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OtpTotpTotpdevice = OtpTotpTotpdevice(name, null)

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row13<Int?, String?, Byte?, String?, Int?, Long?, Int?, Int?, Short?, Long?, Int?, Long?, LocalDateTime?> = super.fieldsRow() as Row13<Int?, String?, Byte?, String?, Int?, Long?, Int?, Int?, Short?, Long?, Int?, Long?, LocalDateTime?>
}
