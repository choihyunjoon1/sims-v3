/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.ExternalLinkLog

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ExternalLinkLogRecord() : UpdatableRecordImpl<ExternalLinkLogRecord>(ExternalLinkLog.EXTERNAL_LINK_LOG), Record8<Int?, Int?, String?, String?, String?, Int?, String?, LocalDateTime?> {

    var externalLinkLogId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var billingId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var externalLinkTypeCd: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var externalLinkDetail: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var externalLinkParameter: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var resultCd: Int?
        set(value) = set(5, value)
        get() = get(5) as Int?

    var externalLinkResponse: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var createDt: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, String?, String?, String?, Int?, String?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, Int?, String?, String?, String?, Int?, String?, LocalDateTime?>
    override fun valuesRow(): Row8<Int?, Int?, String?, String?, String?, Int?, String?, LocalDateTime?> = super.valuesRow() as Row8<Int?, Int?, String?, String?, String?, Int?, String?, LocalDateTime?>
    override fun field1(): Field<Int?> = ExternalLinkLog.EXTERNAL_LINK_LOG.EXTERNAL_LINK_LOG_ID
    override fun field2(): Field<Int?> = ExternalLinkLog.EXTERNAL_LINK_LOG.BILLING_ID
    override fun field3(): Field<String?> = ExternalLinkLog.EXTERNAL_LINK_LOG.EXTERNAL_LINK_TYPE_CD
    override fun field4(): Field<String?> = ExternalLinkLog.EXTERNAL_LINK_LOG.EXTERNAL_LINK_DETAIL
    override fun field5(): Field<String?> = ExternalLinkLog.EXTERNAL_LINK_LOG.EXTERNAL_LINK_PARAMETER
    override fun field6(): Field<Int?> = ExternalLinkLog.EXTERNAL_LINK_LOG.RESULT_CD
    override fun field7(): Field<String?> = ExternalLinkLog.EXTERNAL_LINK_LOG.EXTERNAL_LINK_RESPONSE
    override fun field8(): Field<LocalDateTime?> = ExternalLinkLog.EXTERNAL_LINK_LOG.CREATE_DT
    override fun component1(): Int? = externalLinkLogId
    override fun component2(): Int? = billingId
    override fun component3(): String? = externalLinkTypeCd
    override fun component4(): String? = externalLinkDetail
    override fun component5(): String? = externalLinkParameter
    override fun component6(): Int? = resultCd
    override fun component7(): String? = externalLinkResponse
    override fun component8(): LocalDateTime? = createDt
    override fun value1(): Int? = externalLinkLogId
    override fun value2(): Int? = billingId
    override fun value3(): String? = externalLinkTypeCd
    override fun value4(): String? = externalLinkDetail
    override fun value5(): String? = externalLinkParameter
    override fun value6(): Int? = resultCd
    override fun value7(): String? = externalLinkResponse
    override fun value8(): LocalDateTime? = createDt

    override fun value1(value: Int?): ExternalLinkLogRecord {
        this.externalLinkLogId = value
        return this
    }

    override fun value2(value: Int?): ExternalLinkLogRecord {
        this.billingId = value
        return this
    }

    override fun value3(value: String?): ExternalLinkLogRecord {
        this.externalLinkTypeCd = value
        return this
    }

    override fun value4(value: String?): ExternalLinkLogRecord {
        this.externalLinkDetail = value
        return this
    }

    override fun value5(value: String?): ExternalLinkLogRecord {
        this.externalLinkParameter = value
        return this
    }

    override fun value6(value: Int?): ExternalLinkLogRecord {
        this.resultCd = value
        return this
    }

    override fun value7(value: String?): ExternalLinkLogRecord {
        this.externalLinkResponse = value
        return this
    }

    override fun value8(value: LocalDateTime?): ExternalLinkLogRecord {
        this.createDt = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: String?, value6: Int?, value7: String?, value8: LocalDateTime?): ExternalLinkLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised ExternalLinkLogRecord
     */
    constructor(externalLinkLogId: Int? = null, billingId: Int? = null, externalLinkTypeCd: String? = null, externalLinkDetail: String? = null, externalLinkParameter: String? = null, resultCd: Int? = null, externalLinkResponse: String? = null, createDt: LocalDateTime? = null): this() {
        this.externalLinkLogId = externalLinkLogId
        this.billingId = billingId
        this.externalLinkTypeCd = externalLinkTypeCd
        this.externalLinkDetail = externalLinkDetail
        this.externalLinkParameter = externalLinkParameter
        this.resultCd = resultCd
        this.externalLinkResponse = externalLinkResponse
        this.createDt = createDt
    }
}
