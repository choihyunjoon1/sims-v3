/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_B7
import co.spoonradio.sims.repository.mysql.tables.records.GrantLogRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GrantLog(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GrantLogRecord>?,
    aliased: Table<GrantLogRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GrantLogRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>grant_log</code>
         */
        val GRANT_LOG = GrantLog()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GrantLogRecord> = GrantLogRecord::class.java

    /**
     * The column <code>grant_log.grant_log_id</code>.
     */
    val GRANT_LOG_ID: TableField<GrantLogRecord, Int?> = createField(DSL.name("grant_log_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>grant_log.access_ip</code>.
     */
    val ACCESS_IP: TableField<GrantLogRecord, String?> = createField(DSL.name("access_ip"), SQLDataType.VARCHAR(15).nullable(false), this, "")

    /**
     * The column <code>grant_log.main_menu_id</code>.
     */
    val MAIN_MENU_ID: TableField<GrantLogRecord, Int?> = createField(DSL.name("main_menu_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grant_log.main_menu_name</code>.
     */
    val MAIN_MENU_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("main_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>grant_log.sub_menu_id</code>.
     */
    val SUB_MENU_ID: TableField<GrantLogRecord, Int?> = createField(DSL.name("sub_menu_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grant_log.sub_menu_name</code>.
     */
    val SUB_MENU_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("sub_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_user_id</code>.
     */
    val GRANT_USER_ID: TableField<GrantLogRecord, Int?> = createField(DSL.name("grant_user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_user_name</code>.
     */
    val GRANT_USER_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grantee_user_id</code>.
     */
    val GRANTEE_USER_ID: TableField<GrantLogRecord, Int?> = createField(DSL.name("grantee_user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grant_log.grantee_user_name</code>.
     */
    val GRANTEE_USER_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("grantee_user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_before</code>.
     */
    val GRANT_BEFORE: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_before"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_after</code>.
     */
    val GRANT_AFTER: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_after"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_to_apply</code>.
     */
    val GRANT_TO_APPLY: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_to_apply"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_status</code>.
     */
    val GRANT_STATUS: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_status"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_type</code>.
     */
    val GRANT_TYPE: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_type"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>grant_log.create_dt</code>.
     */
    val CREATE_DT: TableField<GrantLogRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_user_email</code>.
     */
    val GRANT_USER_EMAIL: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_user_email"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>grant_log.grantee_user_email</code>.
     */
    val GRANTEE_USER_EMAIL: TableField<GrantLogRecord, String?> = createField(DSL.name("grantee_user_email"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_user_grp_cd</code>.
     */
    val GRANT_USER_GRP_CD: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_user_grp_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>grant_log.grantee_user_grp_cd</code>.
     */
    val GRANTEE_USER_GRP_CD: TableField<GrantLogRecord, String?> = createField(DSL.name("grantee_user_grp_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>grant_log.en_main_menu_name</code>.
     */
    val EN_MAIN_MENU_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("en_main_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>grant_log.en_sub_menu_name</code>.
     */
    val EN_SUB_MENU_NAME: TableField<GrantLogRecord, String?> = createField(DSL.name("en_sub_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>grant_log.grant_user_auth_cd</code>.
     */
    val GRANT_USER_AUTH_CD: TableField<GrantLogRecord, String?> = createField(DSL.name("grant_user_auth_cd"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>grant_log.grantee_user_auth_cd</code>.
     */
    val GRANTEE_USER_AUTH_CD: TableField<GrantLogRecord, String?> = createField(DSL.name("grantee_user_auth_cd"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<GrantLogRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GrantLogRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>grant_log</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grant_log</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grant_log</code> table reference
     */
    constructor(): this(DSL.name("grant_log"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GrantLogRecord>): this(Internal.createPathAlias(child, key), child, key, GRANT_LOG, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<GrantLogRecord, Int?> = super.getIdentity() as Identity<GrantLogRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GrantLogRecord> = CONSTRAINT_B7
    override fun getKeys(): List<UniqueKey<GrantLogRecord>> = listOf(CONSTRAINT_B7)
    override fun `as`(alias: String): GrantLog = GrantLog(DSL.name(alias), this)
    override fun `as`(alias: Name): GrantLog = GrantLog(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GrantLog = GrantLog(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GrantLog = GrantLog(name, null)
}
