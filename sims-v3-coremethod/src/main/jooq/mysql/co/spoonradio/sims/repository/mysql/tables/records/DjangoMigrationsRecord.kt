/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.DjangoMigrations

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DjangoMigrationsRecord() : UpdatableRecordImpl<DjangoMigrationsRecord>(DjangoMigrations.DJANGO_MIGRATIONS), Record4<Int?, String?, String?, LocalDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var app: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var name: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var applied: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row4<Int?, String?, String?, LocalDateTime?>
    override fun valuesRow(): Row4<Int?, String?, String?, LocalDateTime?> = super.valuesRow() as Row4<Int?, String?, String?, LocalDateTime?>
    override fun field1(): Field<Int?> = DjangoMigrations.DJANGO_MIGRATIONS.ID
    override fun field2(): Field<String?> = DjangoMigrations.DJANGO_MIGRATIONS.APP
    override fun field3(): Field<String?> = DjangoMigrations.DJANGO_MIGRATIONS.NAME
    override fun field4(): Field<LocalDateTime?> = DjangoMigrations.DJANGO_MIGRATIONS.APPLIED
    override fun component1(): Int? = id
    override fun component2(): String? = app
    override fun component3(): String? = name
    override fun component4(): LocalDateTime? = applied
    override fun value1(): Int? = id
    override fun value2(): String? = app
    override fun value3(): String? = name
    override fun value4(): LocalDateTime? = applied

    override fun value1(value: Int?): DjangoMigrationsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): DjangoMigrationsRecord {
        this.app = value
        return this
    }

    override fun value3(value: String?): DjangoMigrationsRecord {
        this.name = value
        return this
    }

    override fun value4(value: LocalDateTime?): DjangoMigrationsRecord {
        this.applied = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: LocalDateTime?): DjangoMigrationsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised DjangoMigrationsRecord
     */
    constructor(id: Int? = null, app: String? = null, name: String? = null, applied: LocalDateTime? = null): this() {
        this.id = id
        this.app = app
        this.name = name
        this.applied = applied
    }
}
