/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_69
import co.spoonradio.sims.repository.mysql.tables.records.TermsRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Terms(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TermsRecord>?,
    aliased: Table<TermsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TermsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>terms</code>
         */
        val TERMS = Terms()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TermsRecord> = TermsRecord::class.java

    /**
     * The column <code>terms.terms_id</code>.
     */
    val TERMS_ID: TableField<TermsRecord, Int?> = createField(DSL.name("terms_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>terms.title</code>.
     */
    val TITLE: TableField<TermsRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>terms.contents</code>.
     */
    val CONTENTS: TableField<TermsRecord, String?> = createField(DSL.name("contents"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>terms.notice_id</code>.
     */
    val NOTICE_ID: TableField<TermsRecord, Int?> = createField(DSL.name("notice_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>terms.terms_type_cd</code>.
     */
    val TERMS_TYPE_CD: TableField<TermsRecord, String?> = createField(DSL.name("terms_type_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>terms.create_dt</code>.
     */
    val CREATE_DT: TableField<TermsRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>terms.update_dt</code>.
     */
    val UPDATE_DT: TableField<TermsRecord, LocalDateTime?> = createField(DSL.name("update_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TermsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TermsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>terms</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>terms</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>terms</code> table reference
     */
    constructor(): this(DSL.name("terms"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TermsRecord>): this(Internal.createPathAlias(child, key), child, key, TERMS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TermsRecord, Int?> = super.getIdentity() as Identity<TermsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TermsRecord> = CONSTRAINT_69
    override fun getKeys(): List<UniqueKey<TermsRecord>> = listOf(CONSTRAINT_69)
    override fun `as`(alias: String): Terms = Terms(DSL.name(alias), this)
    override fun `as`(alias: Name): Terms = Terms(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Terms = Terms(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Terms = Terms(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?>
}
