/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.AuthtokenToken

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthtokenTokenRecord() : UpdatableRecordImpl<AuthtokenTokenRecord>(AuthtokenToken.AUTHTOKEN_TOKEN), Record3<String?, LocalDateTime?, Int?> {

    var key: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var created: LocalDateTime?
        set(value) = set(1, value)
        get() = get(1) as LocalDateTime?

    var userId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, LocalDateTime?, Int?> = super.fieldsRow() as Row3<String?, LocalDateTime?, Int?>
    override fun valuesRow(): Row3<String?, LocalDateTime?, Int?> = super.valuesRow() as Row3<String?, LocalDateTime?, Int?>
    override fun field1(): Field<String?> = AuthtokenToken.AUTHTOKEN_TOKEN.KEY
    override fun field2(): Field<LocalDateTime?> = AuthtokenToken.AUTHTOKEN_TOKEN.CREATED
    override fun field3(): Field<Int?> = AuthtokenToken.AUTHTOKEN_TOKEN.USER_ID
    override fun component1(): String? = key
    override fun component2(): LocalDateTime? = created
    override fun component3(): Int? = userId
    override fun value1(): String? = key
    override fun value2(): LocalDateTime? = created
    override fun value3(): Int? = userId

    override fun value1(value: String?): AuthtokenTokenRecord {
        this.key = value
        return this
    }

    override fun value2(value: LocalDateTime?): AuthtokenTokenRecord {
        this.created = value
        return this
    }

    override fun value3(value: Int?): AuthtokenTokenRecord {
        this.userId = value
        return this
    }

    override fun values(value1: String?, value2: LocalDateTime?, value3: Int?): AuthtokenTokenRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AuthtokenTokenRecord
     */
    constructor(key: String? = null, created: LocalDateTime? = null, userId: Int? = null): this() {
        this.key = key
        this.created = created
        this.userId = userId
    }
}
