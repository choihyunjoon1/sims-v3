/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.Terms

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TermsRecord() : UpdatableRecordImpl<TermsRecord>(Terms.TERMS), Record7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?> {

    var termsId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var title: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var contents: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var noticeId: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var termsTypeCd: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var createDt: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    var updateDt: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row7<Int?, String?, String?, Int?, String?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = Terms.TERMS.TERMS_ID
    override fun field2(): Field<String?> = Terms.TERMS.TITLE
    override fun field3(): Field<String?> = Terms.TERMS.CONTENTS
    override fun field4(): Field<Int?> = Terms.TERMS.NOTICE_ID
    override fun field5(): Field<String?> = Terms.TERMS.TERMS_TYPE_CD
    override fun field6(): Field<LocalDateTime?> = Terms.TERMS.CREATE_DT
    override fun field7(): Field<LocalDateTime?> = Terms.TERMS.UPDATE_DT
    override fun component1(): Int? = termsId
    override fun component2(): String? = title
    override fun component3(): String? = contents
    override fun component4(): Int? = noticeId
    override fun component5(): String? = termsTypeCd
    override fun component6(): LocalDateTime? = createDt
    override fun component7(): LocalDateTime? = updateDt
    override fun value1(): Int? = termsId
    override fun value2(): String? = title
    override fun value3(): String? = contents
    override fun value4(): Int? = noticeId
    override fun value5(): String? = termsTypeCd
    override fun value6(): LocalDateTime? = createDt
    override fun value7(): LocalDateTime? = updateDt

    override fun value1(value: Int?): TermsRecord {
        this.termsId = value
        return this
    }

    override fun value2(value: String?): TermsRecord {
        this.title = value
        return this
    }

    override fun value3(value: String?): TermsRecord {
        this.contents = value
        return this
    }

    override fun value4(value: Int?): TermsRecord {
        this.noticeId = value
        return this
    }

    override fun value5(value: String?): TermsRecord {
        this.termsTypeCd = value
        return this
    }

    override fun value6(value: LocalDateTime?): TermsRecord {
        this.createDt = value
        return this
    }

    override fun value7(value: LocalDateTime?): TermsRecord {
        this.updateDt = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?, value5: String?, value6: LocalDateTime?, value7: LocalDateTime?): TermsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised TermsRecord
     */
    constructor(termsId: Int? = null, title: String? = null, contents: String? = null, noticeId: Int? = null, termsTypeCd: String? = null, createDt: LocalDateTime? = null, updateDt: LocalDateTime? = null): this() {
        this.termsId = termsId
        this.title = title
        this.contents = contents
        this.noticeId = noticeId
        this.termsTypeCd = termsTypeCd
        this.createDt = createDt
        this.updateDt = updateDt
    }
}
