/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.SpoonRewardUser

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpoonRewardUserRecord() : UpdatableRecordImpl<SpoonRewardUserRecord>(SpoonRewardUser.SPOON_REWARD_USER), Record9<Int?, Long?, String?, String?, LocalDateTime?, Long?, LocalDateTime?, Long?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var userId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var txId: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var status: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var created: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var creator: Long?
        set(value) = set(5, value)
        get() = get(5) as Long?

    var updated: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var updater: Long?
        set(value) = set(7, value)
        get() = get(7) as Long?

    var rewardId: Int?
        set(value) = set(8, value)
        get() = get(8) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Int?, Long?, String?, String?, LocalDateTime?, Long?, LocalDateTime?, Long?, Int?> = super.fieldsRow() as Row9<Int?, Long?, String?, String?, LocalDateTime?, Long?, LocalDateTime?, Long?, Int?>
    override fun valuesRow(): Row9<Int?, Long?, String?, String?, LocalDateTime?, Long?, LocalDateTime?, Long?, Int?> = super.valuesRow() as Row9<Int?, Long?, String?, String?, LocalDateTime?, Long?, LocalDateTime?, Long?, Int?>
    override fun field1(): Field<Int?> = SpoonRewardUser.SPOON_REWARD_USER.ID
    override fun field2(): Field<Long?> = SpoonRewardUser.SPOON_REWARD_USER.USER_ID
    override fun field3(): Field<String?> = SpoonRewardUser.SPOON_REWARD_USER.TX_ID
    override fun field4(): Field<String?> = SpoonRewardUser.SPOON_REWARD_USER.STATUS
    override fun field5(): Field<LocalDateTime?> = SpoonRewardUser.SPOON_REWARD_USER.CREATED
    override fun field6(): Field<Long?> = SpoonRewardUser.SPOON_REWARD_USER.CREATOR
    override fun field7(): Field<LocalDateTime?> = SpoonRewardUser.SPOON_REWARD_USER.UPDATED
    override fun field8(): Field<Long?> = SpoonRewardUser.SPOON_REWARD_USER.UPDATER
    override fun field9(): Field<Int?> = SpoonRewardUser.SPOON_REWARD_USER.REWARD_ID
    override fun component1(): Int? = id
    override fun component2(): Long? = userId
    override fun component3(): String? = txId
    override fun component4(): String? = status
    override fun component5(): LocalDateTime? = created
    override fun component6(): Long? = creator
    override fun component7(): LocalDateTime? = updated
    override fun component8(): Long? = updater
    override fun component9(): Int? = rewardId
    override fun value1(): Int? = id
    override fun value2(): Long? = userId
    override fun value3(): String? = txId
    override fun value4(): String? = status
    override fun value5(): LocalDateTime? = created
    override fun value6(): Long? = creator
    override fun value7(): LocalDateTime? = updated
    override fun value8(): Long? = updater
    override fun value9(): Int? = rewardId

    override fun value1(value: Int?): SpoonRewardUserRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): SpoonRewardUserRecord {
        this.userId = value
        return this
    }

    override fun value3(value: String?): SpoonRewardUserRecord {
        this.txId = value
        return this
    }

    override fun value4(value: String?): SpoonRewardUserRecord {
        this.status = value
        return this
    }

    override fun value5(value: LocalDateTime?): SpoonRewardUserRecord {
        this.created = value
        return this
    }

    override fun value6(value: Long?): SpoonRewardUserRecord {
        this.creator = value
        return this
    }

    override fun value7(value: LocalDateTime?): SpoonRewardUserRecord {
        this.updated = value
        return this
    }

    override fun value8(value: Long?): SpoonRewardUserRecord {
        this.updater = value
        return this
    }

    override fun value9(value: Int?): SpoonRewardUserRecord {
        this.rewardId = value
        return this
    }

    override fun values(value1: Int?, value2: Long?, value3: String?, value4: String?, value5: LocalDateTime?, value6: Long?, value7: LocalDateTime?, value8: Long?, value9: Int?): SpoonRewardUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised SpoonRewardUserRecord
     */
    constructor(id: Int? = null, userId: Long? = null, txId: String? = null, status: String? = null, created: LocalDateTime? = null, creator: Long? = null, updated: LocalDateTime? = null, updater: Long? = null, rewardId: Int? = null): this() {
        this.id = id
        this.userId = userId
        this.txId = txId
        this.status = status
        this.created = created
        this.creator = creator
        this.updated = updated
        this.updater = updater
        this.rewardId = rewardId
    }
}
