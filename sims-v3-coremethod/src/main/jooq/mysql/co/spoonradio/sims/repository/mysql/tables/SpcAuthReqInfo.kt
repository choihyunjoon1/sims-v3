/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_35
import co.spoonradio.sims.repository.mysql.tables.records.SpcAuthReqInfoRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpcAuthReqInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SpcAuthReqInfoRecord>?,
    aliased: Table<SpcAuthReqInfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SpcAuthReqInfoRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>spc_auth_req_info</code>
         */
        val SPC_AUTH_REQ_INFO = SpcAuthReqInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SpcAuthReqInfoRecord> = SpcAuthReqInfoRecord::class.java

    /**
     * The column <code>spc_auth_req_info.spc_auth_approve_id</code>.
     */
    val SPC_AUTH_APPROVE_ID: TableField<SpcAuthReqInfoRecord, Int?> = createField(DSL.name("spc_auth_approve_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>spc_auth_req_info.ord</code>.
     */
    val ORD: TableField<SpcAuthReqInfoRecord, Int?> = createField(DSL.name("ord"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>spc_auth_req_info.status_cd</code>.
     */
    val STATUS_CD: TableField<SpcAuthReqInfoRecord, String?> = createField(DSL.name("status_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>spc_auth_req_info.create_dt</code>.
     */
    val CREATE_DT: TableField<SpcAuthReqInfoRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>spc_auth_req_info.update_dt</code>.
     */
    val UPDATE_DT: TableField<SpcAuthReqInfoRecord, LocalDateTime?> = createField(DSL.name("update_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>spc_auth_req_info.approve_user_id</code>.
     */
    val APPROVE_USER_ID: TableField<SpcAuthReqInfoRecord, Int?> = createField(DSL.name("approve_user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>spc_auth_req_info.spc_auth_req_id</code>.
     */
    val SPC_AUTH_REQ_ID: TableField<SpcAuthReqInfoRecord, Int?> = createField(DSL.name("spc_auth_req_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<SpcAuthReqInfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SpcAuthReqInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>spc_auth_req_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>spc_auth_req_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>spc_auth_req_info</code> table reference
     */
    constructor(): this(DSL.name("spc_auth_req_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SpcAuthReqInfoRecord>): this(Internal.createPathAlias(child, key), child, key, SPC_AUTH_REQ_INFO, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<SpcAuthReqInfoRecord, Int?> = super.getIdentity() as Identity<SpcAuthReqInfoRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<SpcAuthReqInfoRecord> = CONSTRAINT_35
    override fun getKeys(): List<UniqueKey<SpcAuthReqInfoRecord>> = listOf(CONSTRAINT_35)
    override fun `as`(alias: String): SpcAuthReqInfo = SpcAuthReqInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): SpcAuthReqInfo = SpcAuthReqInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SpcAuthReqInfo = SpcAuthReqInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SpcAuthReqInfo = SpcAuthReqInfo(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, Int?, String?, LocalDateTime?, LocalDateTime?, Int?, Int?> = super.fieldsRow() as Row7<Int?, Int?, String?, LocalDateTime?, LocalDateTime?, Int?, Int?>
}
