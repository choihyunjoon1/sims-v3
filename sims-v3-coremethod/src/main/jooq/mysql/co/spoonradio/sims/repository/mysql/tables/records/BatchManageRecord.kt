/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.BatchManage

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BatchManageRecord() : UpdatableRecordImpl<BatchManageRecord>(BatchManage.BATCH_MANAGE), Record6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> {

    var batchManageId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var batchTypeCd: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var batchDescription: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var isRun: Byte?
        set(value) = set(3, value)
        get() = get(3) as Byte?

    var updateDt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var createDt: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = BatchManage.BATCH_MANAGE.BATCH_MANAGE_ID
    override fun field2(): Field<String?> = BatchManage.BATCH_MANAGE.BATCH_TYPE_CD
    override fun field3(): Field<String?> = BatchManage.BATCH_MANAGE.BATCH_DESCRIPTION
    override fun field4(): Field<Byte?> = BatchManage.BATCH_MANAGE.IS_RUN
    override fun field5(): Field<LocalDateTime?> = BatchManage.BATCH_MANAGE.UPDATE_DT
    override fun field6(): Field<LocalDateTime?> = BatchManage.BATCH_MANAGE.CREATE_DT
    override fun component1(): Int? = batchManageId
    override fun component2(): String? = batchTypeCd
    override fun component3(): String? = batchDescription
    override fun component4(): Byte? = isRun
    override fun component5(): LocalDateTime? = updateDt
    override fun component6(): LocalDateTime? = createDt
    override fun value1(): Int? = batchManageId
    override fun value2(): String? = batchTypeCd
    override fun value3(): String? = batchDescription
    override fun value4(): Byte? = isRun
    override fun value5(): LocalDateTime? = updateDt
    override fun value6(): LocalDateTime? = createDt

    override fun value1(value: Int?): BatchManageRecord {
        this.batchManageId = value
        return this
    }

    override fun value2(value: String?): BatchManageRecord {
        this.batchTypeCd = value
        return this
    }

    override fun value3(value: String?): BatchManageRecord {
        this.batchDescription = value
        return this
    }

    override fun value4(value: Byte?): BatchManageRecord {
        this.isRun = value
        return this
    }

    override fun value5(value: LocalDateTime?): BatchManageRecord {
        this.updateDt = value
        return this
    }

    override fun value6(value: LocalDateTime?): BatchManageRecord {
        this.createDt = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Byte?, value5: LocalDateTime?, value6: LocalDateTime?): BatchManageRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised BatchManageRecord
     */
    constructor(batchManageId: Int? = null, batchTypeCd: String? = null, batchDescription: String? = null, isRun: Byte? = null, updateDt: LocalDateTime? = null, createDt: LocalDateTime? = null): this() {
        this.batchManageId = batchManageId
        this.batchTypeCd = batchTypeCd
        this.batchDescription = batchDescription
        this.isRun = isRun
        this.updateDt = updateDt
        this.createDt = createDt
    }
}
