/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_B8
import co.spoonradio.sims.repository.mysql.tables.records.AuditLogRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuditLog(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AuditLogRecord>?,
    aliased: Table<AuditLogRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AuditLogRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>audit_log</code>
         */
        val AUDIT_LOG = AuditLog()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuditLogRecord> = AuditLogRecord::class.java

    /**
     * The column <code>audit_log.audit_log_id</code>.
     */
    val AUDIT_LOG_ID: TableField<AuditLogRecord, Int?> = createField(DSL.name("audit_log_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>audit_log.access_ip</code>.
     */
    val ACCESS_IP: TableField<AuditLogRecord, String?> = createField(DSL.name("access_ip"), SQLDataType.VARCHAR(15).nullable(false), this, "")

    /**
     * The column <code>audit_log.access_agent</code>.
     */
    val ACCESS_AGENT: TableField<AuditLogRecord, String?> = createField(DSL.name("access_agent"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.api_url</code>.
     */
    val API_URL: TableField<AuditLogRecord, String?> = createField(DSL.name("api_url"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.api_method</code>.
     */
    val API_METHOD: TableField<AuditLogRecord, String?> = createField(DSL.name("api_method"), SQLDataType.VARCHAR(7).nullable(false), this, "")

    /**
     * The column <code>audit_log.api_detail</code>.
     */
    val API_DETAIL: TableField<AuditLogRecord, String?> = createField(DSL.name("api_detail"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.req_parameter</code>.
     */
    val REQ_PARAMETER: TableField<AuditLogRecord, String?> = createField(DSL.name("req_parameter"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>audit_log.sub_menu_id</code>.
     */
    val SUB_MENU_ID: TableField<AuditLogRecord, Int?> = createField(DSL.name("sub_menu_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>audit_log.sub_menu_name</code>.
     */
    val SUB_MENU_NAME: TableField<AuditLogRecord, String?> = createField(DSL.name("sub_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>audit_log.user_id</code>.
     */
    val USER_ID: TableField<AuditLogRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>audit_log.user_name</code>.
     */
    val USER_NAME: TableField<AuditLogRecord, String?> = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.result_cd</code>.
     */
    val RESULT_CD: TableField<AuditLogRecord, String?> = createField(DSL.name("result_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>audit_log.create_dt</code>.
     */
    val CREATE_DT: TableField<AuditLogRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>audit_log.download_reason</code>.
     */
    val DOWNLOAD_REASON: TableField<AuditLogRecord, String?> = createField(DSL.name("download_reason"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.en_api_detail</code>.
     */
    val EN_API_DETAIL: TableField<AuditLogRecord, String?> = createField(DSL.name("en_api_detail"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>audit_log.en_sub_menu_name</code>.
     */
    val EN_SUB_MENU_NAME: TableField<AuditLogRecord, String?> = createField(DSL.name("en_sub_menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AuditLogRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AuditLogRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>audit_log</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>audit_log</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>audit_log</code> table reference
     */
    constructor(): this(DSL.name("audit_log"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AuditLogRecord>): this(Internal.createPathAlias(child, key), child, key, AUDIT_LOG, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<AuditLogRecord, Int?> = super.getIdentity() as Identity<AuditLogRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<AuditLogRecord> = CONSTRAINT_B8
    override fun getKeys(): List<UniqueKey<AuditLogRecord>> = listOf(CONSTRAINT_B8)
    override fun `as`(alias: String): AuditLog = AuditLog(DSL.name(alias), this)
    override fun `as`(alias: Name): AuditLog = AuditLog(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AuditLog = AuditLog(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AuditLog = AuditLog(name, null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<Int?, String?, String?, String?, String?, String?, String?, Int?, String?, Int?, String?, String?, LocalDateTime?, String?, String?, String?> = super.fieldsRow() as Row16<Int?, String?, String?, String?, String?, String?, String?, Int?, String?, Int?, String?, String?, LocalDateTime?, String?, String?, String?>
}
