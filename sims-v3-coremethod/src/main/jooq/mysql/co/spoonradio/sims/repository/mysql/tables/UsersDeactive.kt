/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_96
import co.spoonradio.sims.repository.mysql.tables.records.UsersDeactiveRecord

import java.time.LocalDate
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersDeactive(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersDeactiveRecord>?,
    aliased: Table<UsersDeactiveRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersDeactiveRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users_deactive</code>
         */
        val USERS_DEACTIVE = UsersDeactive()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersDeactiveRecord> = UsersDeactiveRecord::class.java

    /**
     * The column <code>users_deactive.user_deactive_id</code>.
     */
    val USER_DEACTIVE_ID: TableField<UsersDeactiveRecord, Int?> = createField(DSL.name("user_deactive_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users_deactive.user_id</code>.
     */
    val USER_ID: TableField<UsersDeactiveRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>users_deactive.tag</code>.
     */
    val TAG: TableField<UsersDeactiveRecord, String?> = createField(DSL.name("tag"), SQLDataType.VARCHAR(15), this, "")

    /**
     * The column <code>users_deactive.date_of_birth</code>.
     */
    val DATE_OF_BIRTH: TableField<UsersDeactiveRecord, LocalDate?> = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>users_deactive.first_name</code>.
     */
    val FIRST_NAME: TableField<UsersDeactiveRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(30).nullable(false), this, "")

    /**
     * The column <code>users_deactive.last_name</code>.
     */
    val LAST_NAME: TableField<UsersDeactiveRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>users_deactive.withdraw_date</code>.
     */
    val WITHDRAW_DATE: TableField<UsersDeactiveRecord, LocalDateTime?> = createField(DSL.name("withdraw_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>users_deactive.delete_date</code>.
     */
    val DELETE_DATE: TableField<UsersDeactiveRecord, LocalDateTime?> = createField(DSL.name("delete_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>users_deactive.nickname</code>.
     */
    val NICKNAME: TableField<UsersDeactiveRecord, String?> = createField(DSL.name("nickname"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UsersDeactiveRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersDeactiveRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users_deactive</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users_deactive</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users_deactive</code> table reference
     */
    constructor(): this(DSL.name("users_deactive"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersDeactiveRecord>): this(Internal.createPathAlias(child, key), child, key, USERS_DEACTIVE, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersDeactiveRecord, Int?> = super.getIdentity() as Identity<UsersDeactiveRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersDeactiveRecord> = CONSTRAINT_96
    override fun getKeys(): List<UniqueKey<UsersDeactiveRecord>> = listOf(CONSTRAINT_96)
    override fun `as`(alias: String): UsersDeactive = UsersDeactive(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersDeactive = UsersDeactive(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersDeactive = UsersDeactive(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersDeactive = UsersDeactive(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Int?, Int?, String?, LocalDate?, String?, String?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row9<Int?, Int?, String?, LocalDate?, String?, String?, LocalDateTime?, LocalDateTime?, String?>
}
