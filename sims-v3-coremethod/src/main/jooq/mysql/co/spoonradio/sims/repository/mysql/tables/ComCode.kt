/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_D
import co.spoonradio.sims.repository.mysql.tables.records.ComCodeRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row16
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ComCode(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ComCodeRecord>?,
    aliased: Table<ComCodeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ComCodeRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>com_code</code>
         */
        val COM_CODE = ComCode()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ComCodeRecord> = ComCodeRecord::class.java

    /**
     * The column <code>com_code.id</code>.
     */
    val ID: TableField<ComCodeRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>com_code.grp_code_cd</code>.
     */
    val GRP_CODE_CD: TableField<ComCodeRecord, String?> = createField(DSL.name("grp_code_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>com_code.grp_code_name</code>.
     */
    val GRP_CODE_NAME: TableField<ComCodeRecord, String?> = createField(DSL.name("grp_code_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>com_code.code_cd</code>.
     */
    val CODE_CD: TableField<ComCodeRecord, String?> = createField(DSL.name("code_cd"), SQLDataType.VARCHAR(14).nullable(false), this, "")

    /**
     * The column <code>com_code.code_nm</code>.
     */
    val CODE_NM: TableField<ComCodeRecord, String?> = createField(DSL.name("code_nm"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>com_code.code_desc</code>.
     */
    val CODE_DESC: TableField<ComCodeRecord, String?> = createField(DSL.name("code_desc"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>com_code.etc1</code>.
     */
    val ETC1: TableField<ComCodeRecord, String?> = createField(DSL.name("etc1"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>com_code.etc2</code>.
     */
    val ETC2: TableField<ComCodeRecord, String?> = createField(DSL.name("etc2"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>com_code.etc3</code>.
     */
    val ETC3: TableField<ComCodeRecord, String?> = createField(DSL.name("etc3"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>com_code.parent_grp_code_cd</code>.
     */
    val PARENT_GRP_CODE_CD: TableField<ComCodeRecord, String?> = createField(DSL.name("parent_grp_code_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>com_code.parent_code_cd</code>.
     */
    val PARENT_CODE_CD: TableField<ComCodeRecord, String?> = createField(DSL.name("parent_code_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>com_code.use_yn</code>.
     */
    val USE_YN: TableField<ComCodeRecord, Byte?> = createField(DSL.name("use_yn"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>com_code.ord</code>.
     */
    val ORD: TableField<ComCodeRecord, Int?> = createField(DSL.name("ord"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>com_code.update_dt</code>.
     */
    val UPDATE_DT: TableField<ComCodeRecord, LocalDateTime?> = createField(DSL.name("update_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>com_code.create_dt</code>.
     */
    val CREATE_DT: TableField<ComCodeRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>com_code.en_code_nm</code>.
     */
    val EN_CODE_NM: TableField<ComCodeRecord, String?> = createField(DSL.name("en_code_nm"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ComCodeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ComCodeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>com_code</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>com_code</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>com_code</code> table reference
     */
    constructor(): this(DSL.name("com_code"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ComCodeRecord>): this(Internal.createPathAlias(child, key), child, key, COM_CODE, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<ComCodeRecord, Int?> = super.getIdentity() as Identity<ComCodeRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ComCodeRecord> = CONSTRAINT_D
    override fun getKeys(): List<UniqueKey<ComCodeRecord>> = listOf(CONSTRAINT_D)
    override fun `as`(alias: String): ComCode = ComCode(DSL.name(alias), this)
    override fun `as`(alias: Name): ComCode = ComCode(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ComCode = ComCode(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ComCode = ComCode(name, null)

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row16<Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Byte?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row16<Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?, String?, Byte?, Int?, LocalDateTime?, LocalDateTime?, String?>
}
