/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables.records


import co.spoonradio.sims.repository.mysql.tables.Notice

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record12
import org.jooq.Row12
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NoticeRecord() : UpdatableRecordImpl<NoticeRecord>(Notice.NOTICE), Record12<Int?, String?, String?, String?, String?, Byte?, Byte?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?> {

    var noticeId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var contents: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var noticeImage: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var noticeTypeCd: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var isPopup: Byte?
        set(value) = set(5, value)
        get() = get(5) as Byte?

    var isAvailable: Byte?
        set(value) = set(6, value)
        get() = get(6) as Byte?

    var startDt: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    var endDt: LocalDateTime?
        set(value) = set(8, value)
        get() = get(8) as LocalDateTime?

    var createDt: LocalDateTime?
        set(value) = set(9, value)
        get() = get(9) as LocalDateTime?

    var updateDt: LocalDateTime?
        set(value) = set(10, value)
        get() = get(10) as LocalDateTime?

    var userName: String?
        set(value) = set(11, value)
        get() = get(11) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row12<Int?, String?, String?, String?, String?, Byte?, Byte?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row12<Int?, String?, String?, String?, String?, Byte?, Byte?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row12<Int?, String?, String?, String?, String?, Byte?, Byte?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row12<Int?, String?, String?, String?, String?, Byte?, Byte?, LocalDateTime?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<Int?> = Notice.NOTICE.NOTICE_ID
    override fun field2(): Field<String?> = Notice.NOTICE.NAME
    override fun field3(): Field<String?> = Notice.NOTICE.CONTENTS
    override fun field4(): Field<String?> = Notice.NOTICE.NOTICE_IMAGE
    override fun field5(): Field<String?> = Notice.NOTICE.NOTICE_TYPE_CD
    override fun field6(): Field<Byte?> = Notice.NOTICE.IS_POPUP
    override fun field7(): Field<Byte?> = Notice.NOTICE.IS_AVAILABLE
    override fun field8(): Field<LocalDateTime?> = Notice.NOTICE.START_DT
    override fun field9(): Field<LocalDateTime?> = Notice.NOTICE.END_DT
    override fun field10(): Field<LocalDateTime?> = Notice.NOTICE.CREATE_DT
    override fun field11(): Field<LocalDateTime?> = Notice.NOTICE.UPDATE_DT
    override fun field12(): Field<String?> = Notice.NOTICE.USER_NAME
    override fun component1(): Int? = noticeId
    override fun component2(): String? = name
    override fun component3(): String? = contents
    override fun component4(): String? = noticeImage
    override fun component5(): String? = noticeTypeCd
    override fun component6(): Byte? = isPopup
    override fun component7(): Byte? = isAvailable
    override fun component8(): LocalDateTime? = startDt
    override fun component9(): LocalDateTime? = endDt
    override fun component10(): LocalDateTime? = createDt
    override fun component11(): LocalDateTime? = updateDt
    override fun component12(): String? = userName
    override fun value1(): Int? = noticeId
    override fun value2(): String? = name
    override fun value3(): String? = contents
    override fun value4(): String? = noticeImage
    override fun value5(): String? = noticeTypeCd
    override fun value6(): Byte? = isPopup
    override fun value7(): Byte? = isAvailable
    override fun value8(): LocalDateTime? = startDt
    override fun value9(): LocalDateTime? = endDt
    override fun value10(): LocalDateTime? = createDt
    override fun value11(): LocalDateTime? = updateDt
    override fun value12(): String? = userName

    override fun value1(value: Int?): NoticeRecord {
        this.noticeId = value
        return this
    }

    override fun value2(value: String?): NoticeRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): NoticeRecord {
        this.contents = value
        return this
    }

    override fun value4(value: String?): NoticeRecord {
        this.noticeImage = value
        return this
    }

    override fun value5(value: String?): NoticeRecord {
        this.noticeTypeCd = value
        return this
    }

    override fun value6(value: Byte?): NoticeRecord {
        this.isPopup = value
        return this
    }

    override fun value7(value: Byte?): NoticeRecord {
        this.isAvailable = value
        return this
    }

    override fun value8(value: LocalDateTime?): NoticeRecord {
        this.startDt = value
        return this
    }

    override fun value9(value: LocalDateTime?): NoticeRecord {
        this.endDt = value
        return this
    }

    override fun value10(value: LocalDateTime?): NoticeRecord {
        this.createDt = value
        return this
    }

    override fun value11(value: LocalDateTime?): NoticeRecord {
        this.updateDt = value
        return this
    }

    override fun value12(value: String?): NoticeRecord {
        this.userName = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: String?, value6: Byte?, value7: Byte?, value8: LocalDateTime?, value9: LocalDateTime?, value10: LocalDateTime?, value11: LocalDateTime?, value12: String?): NoticeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        this.value12(value12)
        return this
    }

    /**
     * Create a detached, initialised NoticeRecord
     */
    constructor(noticeId: Int? = null, name: String? = null, contents: String? = null, noticeImage: String? = null, noticeTypeCd: String? = null, isPopup: Byte? = null, isAvailable: Byte? = null, startDt: LocalDateTime? = null, endDt: LocalDateTime? = null, createDt: LocalDateTime? = null, updateDt: LocalDateTime? = null, userName: String? = null): this() {
        this.noticeId = noticeId
        this.name = name
        this.contents = contents
        this.noticeImage = noticeImage
        this.noticeTypeCd = noticeTypeCd
        this.isPopup = isPopup
        this.isAvailable = isAvailable
        this.startDt = startDt
        this.endDt = endDt
        this.createDt = createDt
        this.updateDt = updateDt
        this.userName = userName
    }
}
