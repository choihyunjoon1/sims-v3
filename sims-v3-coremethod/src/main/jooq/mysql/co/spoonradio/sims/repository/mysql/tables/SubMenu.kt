/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.mysql.tables


import co.spoonradio.sims.repository.mysql.DefaultSchema
import co.spoonradio.sims.repository.mysql.keys.CONSTRAINT_84
import co.spoonradio.sims.repository.mysql.tables.records.SubMenuRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row21
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SubMenu(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SubMenuRecord>?,
    aliased: Table<SubMenuRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SubMenuRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>sub_menu</code>
         */
        val SUB_MENU = SubMenu()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SubMenuRecord> = SubMenuRecord::class.java

    /**
     * The column <code>sub_menu.sub_menu_id</code>.
     */
    val SUB_MENU_ID: TableField<SubMenuRecord, Int?> = createField(DSL.name("sub_menu_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>sub_menu.name</code>.
     */
    val NAME: TableField<SubMenuRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>sub_menu.en_name</code>.
     */
    val EN_NAME: TableField<SubMenuRecord, String?> = createField(DSL.name("en_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>sub_menu.ord</code>.
     */
    val ORD: TableField<SubMenuRecord, Int?> = createField(DSL.name("ord"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>sub_menu.api</code>.
     */
    val API: TableField<SubMenuRecord, String?> = createField(DSL.name("api"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>sub_menu.api_method</code>.
     */
    val API_METHOD: TableField<SubMenuRecord, String?> = createField(DSL.name("api_method"), SQLDataType.VARCHAR(7).nullable(false), this, "")

    /**
     * The column <code>sub_menu.api_detail</code>.
     */
    val API_DETAIL: TableField<SubMenuRecord, String?> = createField(DSL.name("api_detail"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>sub_menu.menu_type_cd</code>.
     */
    val MENU_TYPE_CD: TableField<SubMenuRecord, String?> = createField(DSL.name("menu_type_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>sub_menu.spc_auth</code>.
     */
    val SPC_AUTH: TableField<SubMenuRecord, Byte?> = createField(DSL.name("spc_auth"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>sub_menu.spc_auth_cd</code>.
     */
    val SPC_AUTH_CD: TableField<SubMenuRecord, String?> = createField(DSL.name("spc_auth_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>sub_menu.create_dt</code>.
     */
    val CREATE_DT: TableField<SubMenuRecord, LocalDateTime?> = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>sub_menu.update_dt</code>.
     */
    val UPDATE_DT: TableField<SubMenuRecord, LocalDateTime?> = createField(DSL.name("update_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>sub_menu.menu_id</code>.
     */
    val MENU_ID: TableField<SubMenuRecord, Int?> = createField(DSL.name("menu_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>sub_menu.is_common</code>.
     */
    val IS_COMMON: TableField<SubMenuRecord, Byte?> = createField(DSL.name("is_common"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>sub_menu.is_ns</code>.
     */
    val IS_NS: TableField<SubMenuRecord, Byte?> = createField(DSL.name("is_ns"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>sub_menu.menu_auth_type_cd</code>.
     */
    val MENU_AUTH_TYPE_CD: TableField<SubMenuRecord, String?> = createField(DSL.name("menu_auth_type_cd"), SQLDataType.VARCHAR(5).nullable(false), this, "")

    /**
     * The column <code>sub_menu.parent_sub_menu_id</code>.
     */
    val PARENT_SUB_MENU_ID: TableField<SubMenuRecord, Int?> = createField(DSL.name("parent_sub_menu_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>sub_menu.en_api_detail</code>.
     */
    val EN_API_DETAIL: TableField<SubMenuRecord, String?> = createField(DSL.name("en_api_detail"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>sub_menu.parent_tab_menu_id</code>.
     */
    val PARENT_TAB_MENU_ID: TableField<SubMenuRecord, Short?> = createField(DSL.name("parent_tab_menu_id"), SQLDataType.SMALLINT, this, "")

    /**
     * The column <code>sub_menu.country_flag</code>.
     */
    val COUNTRY_FLAG: TableField<SubMenuRecord, Short?> = createField(DSL.name("country_flag"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "")

    /**
     * The column <code>sub_menu.is_used</code>.
     */
    val IS_USED: TableField<SubMenuRecord, Byte?> = createField(DSL.name("is_used"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.TINYINT)), this, "")

    private constructor(alias: Name, aliased: Table<SubMenuRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SubMenuRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sub_menu</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sub_menu</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sub_menu</code> table reference
     */
    constructor(): this(DSL.name("sub_menu"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SubMenuRecord>): this(Internal.createPathAlias(child, key), child, key, SUB_MENU, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<SubMenuRecord, Int?> = super.getIdentity() as Identity<SubMenuRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<SubMenuRecord> = CONSTRAINT_84
    override fun getKeys(): List<UniqueKey<SubMenuRecord>> = listOf(CONSTRAINT_84)
    override fun `as`(alias: String): SubMenu = SubMenu(DSL.name(alias), this)
    override fun `as`(alias: Name): SubMenu = SubMenu(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SubMenu = SubMenu(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SubMenu = SubMenu(name, null)

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?> = super.fieldsRow() as Row21<Int?, String?, String?, Int?, String?, String?, String?, String?, Byte?, String?, LocalDateTime?, LocalDateTime?, Int?, Byte?, Byte?, String?, Int?, String?, Short?, Short?, Byte?>
}
