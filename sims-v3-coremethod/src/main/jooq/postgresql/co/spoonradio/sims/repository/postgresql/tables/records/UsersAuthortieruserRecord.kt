/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables.records


import co.spoonradio.sims.repository.postgresql.tables.UsersAuthortieruser

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersAuthortieruserRecord() : UpdatableRecordImpl<UsersAuthortieruserRecord>(UsersAuthortieruser.USERS_AUTHORTIERUSER), Record4<Int?, OffsetDateTime?, Int?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var created: OffsetDateTime?
        set(value) = set(1, value)
        get() = get(1) as OffsetDateTime?

    var tierId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var userId: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, OffsetDateTime?, Int?, Int?> = super.fieldsRow() as Row4<Int?, OffsetDateTime?, Int?, Int?>
    override fun valuesRow(): Row4<Int?, OffsetDateTime?, Int?, Int?> = super.valuesRow() as Row4<Int?, OffsetDateTime?, Int?, Int?>
    override fun field1(): Field<Int?> = UsersAuthortieruser.USERS_AUTHORTIERUSER.ID
    override fun field2(): Field<OffsetDateTime?> = UsersAuthortieruser.USERS_AUTHORTIERUSER.CREATED
    override fun field3(): Field<Int?> = UsersAuthortieruser.USERS_AUTHORTIERUSER.TIER_ID
    override fun field4(): Field<Int?> = UsersAuthortieruser.USERS_AUTHORTIERUSER.USER_ID
    override fun component1(): Int? = id
    override fun component2(): OffsetDateTime? = created
    override fun component3(): Int? = tierId
    override fun component4(): Int? = userId
    override fun value1(): Int? = id
    override fun value2(): OffsetDateTime? = created
    override fun value3(): Int? = tierId
    override fun value4(): Int? = userId

    override fun value1(value: Int?): UsersAuthortieruserRecord {
        this.id = value
        return this
    }

    override fun value2(value: OffsetDateTime?): UsersAuthortieruserRecord {
        this.created = value
        return this
    }

    override fun value3(value: Int?): UsersAuthortieruserRecord {
        this.tierId = value
        return this
    }

    override fun value4(value: Int?): UsersAuthortieruserRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Int?, value2: OffsetDateTime?, value3: Int?, value4: Int?): UsersAuthortieruserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UsersAuthortieruserRecord
     */
    constructor(id: Int? = null, created: OffsetDateTime? = null, tierId: Int? = null, userId: Int? = null): this() {
        this.id = id
        this.created = created
        this.tierId = tierId
        this.userId = userId
    }
}
