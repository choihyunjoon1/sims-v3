/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables.records


import co.spoonradio.sims.repository.postgresql.tables.UsersBancategorycontent

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersBancategorycontentRecord() : UpdatableRecordImpl<UsersBancategorycontentRecord>(UsersBancategorycontent.USERS_BANCATEGORYCONTENT), Record4<Int?, String?, Boolean?, OffsetDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var isUse: Boolean?
        set(value) = set(2, value)
        get() = get(2) as Boolean?

    var created: OffsetDateTime?
        set(value) = set(3, value)
        get() = get(3) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, Boolean?, OffsetDateTime?> = super.fieldsRow() as Row4<Int?, String?, Boolean?, OffsetDateTime?>
    override fun valuesRow(): Row4<Int?, String?, Boolean?, OffsetDateTime?> = super.valuesRow() as Row4<Int?, String?, Boolean?, OffsetDateTime?>
    override fun field1(): Field<Int?> = UsersBancategorycontent.USERS_BANCATEGORYCONTENT.ID
    override fun field2(): Field<String?> = UsersBancategorycontent.USERS_BANCATEGORYCONTENT.NAME
    override fun field3(): Field<Boolean?> = UsersBancategorycontent.USERS_BANCATEGORYCONTENT.IS_USE
    override fun field4(): Field<OffsetDateTime?> = UsersBancategorycontent.USERS_BANCATEGORYCONTENT.CREATED
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): Boolean? = isUse
    override fun component4(): OffsetDateTime? = created
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): Boolean? = isUse
    override fun value4(): OffsetDateTime? = created

    override fun value1(value: Int?): UsersBancategorycontentRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UsersBancategorycontentRecord {
        this.name = value
        return this
    }

    override fun value3(value: Boolean?): UsersBancategorycontentRecord {
        this.isUse = value
        return this
    }

    override fun value4(value: OffsetDateTime?): UsersBancategorycontentRecord {
        this.created = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Boolean?, value4: OffsetDateTime?): UsersBancategorycontentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UsersBancategorycontentRecord
     */
    constructor(id: Int? = null, name: String? = null, isUse: Boolean? = null, created: OffsetDateTime? = null): this() {
        this.id = id
        this.name = name
        this.isUse = isUse
        this.created = created
    }
}
