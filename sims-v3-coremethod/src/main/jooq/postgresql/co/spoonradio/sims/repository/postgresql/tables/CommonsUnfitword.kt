/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.COMMONS_UNFITWORD_PKEY
import co.spoonradio.sims.repository.postgresql.keys.COMMONS_UNFITWORD_WORD_KEY
import co.spoonradio.sims.repository.postgresql.tables.records.CommonsUnfitwordRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CommonsUnfitword(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CommonsUnfitwordRecord>?,
    aliased: Table<CommonsUnfitwordRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CommonsUnfitwordRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>commons_unfitword</code>
         */
        val COMMONS_UNFITWORD = CommonsUnfitword()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CommonsUnfitwordRecord> = CommonsUnfitwordRecord::class.java

    /**
     * The column <code>commons_unfitword.id</code>.
     */
    val ID: TableField<CommonsUnfitwordRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>commons_unfitword.word</code>.
     */
    val WORD: TableField<CommonsUnfitwordRecord, String?> = createField(DSL.name("word"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>commons_unfitword.created</code>.
     */
    val CREATED: TableField<CommonsUnfitwordRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>commons_unfitword.is_used</code>.
     */
    val IS_USED: TableField<CommonsUnfitwordRecord, Boolean?> = createField(DSL.name("is_used"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>commons_unfitword.to_contents</code>.
     */
    val TO_CONTENTS: TableField<CommonsUnfitwordRecord, Boolean?> = createField(DSL.name("to_contents"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>commons_unfitword.to_nickname</code>.
     */
    val TO_NICKNAME: TableField<CommonsUnfitwordRecord, Boolean?> = createField(DSL.name("to_nickname"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>commons_unfitword.reword</code>.
     */
    val REWORD: TableField<CommonsUnfitwordRecord, String?> = createField(DSL.name("reword"), SQLDataType.VARCHAR(40), this, "")

    private constructor(alias: Name, aliased: Table<CommonsUnfitwordRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CommonsUnfitwordRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>commons_unfitword</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>commons_unfitword</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>commons_unfitword</code> table reference
     */
    constructor(): this(DSL.name("commons_unfitword"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CommonsUnfitwordRecord>): this(Internal.createPathAlias(child, key), child, key, COMMONS_UNFITWORD, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<CommonsUnfitwordRecord, Int?> = super.getIdentity() as Identity<CommonsUnfitwordRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CommonsUnfitwordRecord> = COMMONS_UNFITWORD_PKEY
    override fun getKeys(): List<UniqueKey<CommonsUnfitwordRecord>> = listOf(COMMONS_UNFITWORD_PKEY, COMMONS_UNFITWORD_WORD_KEY)
    override fun `as`(alias: String): CommonsUnfitword = CommonsUnfitword(DSL.name(alias), this)
    override fun `as`(alias: Name): CommonsUnfitword = CommonsUnfitword(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CommonsUnfitword = CommonsUnfitword(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CommonsUnfitword = CommonsUnfitword(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, String?, OffsetDateTime?, Boolean?, Boolean?, Boolean?, String?> = super.fieldsRow() as Row7<Int?, String?, OffsetDateTime?, Boolean?, Boolean?, Boolean?, String?>
}
