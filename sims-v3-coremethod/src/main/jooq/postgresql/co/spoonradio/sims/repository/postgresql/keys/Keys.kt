/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.keys


import co.spoonradio.sims.repository.postgresql.tables.CastsCast
import co.spoonradio.sims.repository.postgresql.tables.CastsTextcomment
import co.spoonradio.sims.repository.postgresql.tables.CommonsUnfitword
import co.spoonradio.sims.repository.postgresql.tables.FanboardFancomment
import co.spoonradio.sims.repository.postgresql.tables.FanboardFanmessage
import co.spoonradio.sims.repository.postgresql.tables.NiceNiceauthuserinfo
import co.spoonradio.sims.repository.postgresql.tables.ReportsCastcommentreport
import co.spoonradio.sims.repository.postgresql.tables.ReportsCastreport
import co.spoonradio.sims.repository.postgresql.tables.ReportsLivemessagereport
import co.spoonradio.sims.repository.postgresql.tables.ReportsLivereport
import co.spoonradio.sims.repository.postgresql.tables.ReportsMailboxmessagereport
import co.spoonradio.sims.repository.postgresql.tables.ReportsTalkcommentreport
import co.spoonradio.sims.repository.postgresql.tables.ReportsTalkreport
import co.spoonradio.sims.repository.postgresql.tables.ReportsUserreport
import co.spoonradio.sims.repository.postgresql.tables.TalksTalk
import co.spoonradio.sims.repository.postgresql.tables.TalksTalkvoicecomment
import co.spoonradio.sims.repository.postgresql.tables.UsersAccount
import co.spoonradio.sims.repository.postgresql.tables.UsersAuthortier
import co.spoonradio.sims.repository.postgresql.tables.UsersAuthortierhistory
import co.spoonradio.sims.repository.postgresql.tables.UsersAuthortieruser
import co.spoonradio.sims.repository.postgresql.tables.UsersBan
import co.spoonradio.sims.repository.postgresql.tables.UsersBancategorycontent
import co.spoonradio.sims.repository.postgresql.tables.UsersBancategorymain
import co.spoonradio.sims.repository.postgresql.tables.UsersBancategorysub
import co.spoonradio.sims.repository.postgresql.tables.UsersDevice
import co.spoonradio.sims.repository.postgresql.tables.UsersFollow
import co.spoonradio.sims.repository.postgresql.tables.UsersGrant
import co.spoonradio.sims.repository.postgresql.tables.UsersProfile
import co.spoonradio.sims.repository.postgresql.tables.UsersSpoonuser
import co.spoonradio.sims.repository.postgresql.tables.records.CastsCastRecord
import co.spoonradio.sims.repository.postgresql.tables.records.CastsTextcommentRecord
import co.spoonradio.sims.repository.postgresql.tables.records.CommonsUnfitwordRecord
import co.spoonradio.sims.repository.postgresql.tables.records.FanboardFancommentRecord
import co.spoonradio.sims.repository.postgresql.tables.records.FanboardFanmessageRecord
import co.spoonradio.sims.repository.postgresql.tables.records.NiceNiceauthuserinfoRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsCastcommentreportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsCastreportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsLivemessagereportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsLivereportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsMailboxmessagereportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsTalkcommentreportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsTalkreportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsUserreportRecord
import co.spoonradio.sims.repository.postgresql.tables.records.TalksTalkRecord
import co.spoonradio.sims.repository.postgresql.tables.records.TalksTalkvoicecommentRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAccountRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAuthortierRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAuthortierhistoryRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAuthortieruserRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersBanRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersBancategorycontentRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersBancategorymainRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersBancategorysubRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersDeviceRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersFollowRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersGrantRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersProfileRecord
import co.spoonradio.sims.repository.postgresql.tables.records.UsersSpoonuserRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val CASTS_CAST_PKEY: UniqueKey<CastsCastRecord> = Internal.createUniqueKey(CastsCast.CASTS_CAST, DSL.name("casts_cast_pkey"), arrayOf(CastsCast.CASTS_CAST.ID), true)
val CASTS_TEXTCOMMENT_PKEY: UniqueKey<CastsTextcommentRecord> = Internal.createUniqueKey(CastsTextcomment.CASTS_TEXTCOMMENT, DSL.name("casts_textcomment_pkey"), arrayOf(CastsTextcomment.CASTS_TEXTCOMMENT.ID), true)
val COMMONS_UNFITWORD_PKEY: UniqueKey<CommonsUnfitwordRecord> = Internal.createUniqueKey(CommonsUnfitword.COMMONS_UNFITWORD, DSL.name("commons_unfitword_pkey"), arrayOf(CommonsUnfitword.COMMONS_UNFITWORD.ID), true)
val COMMONS_UNFITWORD_WORD_KEY: UniqueKey<CommonsUnfitwordRecord> = Internal.createUniqueKey(CommonsUnfitword.COMMONS_UNFITWORD, DSL.name("commons_unfitword_word_key"), arrayOf(CommonsUnfitword.COMMONS_UNFITWORD.WORD), true)
val FANBOARD_FANCOMMENT_PKEY: UniqueKey<FanboardFancommentRecord> = Internal.createUniqueKey(FanboardFancomment.FANBOARD_FANCOMMENT, DSL.name("fanboard_fancomment_pkey"), arrayOf(FanboardFancomment.FANBOARD_FANCOMMENT.ID), true)
val FANBOARD_FANMESSAGE_PKEY: UniqueKey<FanboardFanmessageRecord> = Internal.createUniqueKey(FanboardFanmessage.FANBOARD_FANMESSAGE, DSL.name("fanboard_fanmessage_pkey"), arrayOf(FanboardFanmessage.FANBOARD_FANMESSAGE.ID), true)
val NICE_NICEAUTHUSERINFO_PKEY: UniqueKey<NiceNiceauthuserinfoRecord> = Internal.createUniqueKey(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO, DSL.name("nice_niceauthuserinfo_pkey"), arrayOf(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO.ID), true)
val NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_UNIQ: UniqueKey<NiceNiceauthuserinfoRecord> = Internal.createUniqueKey(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO, DSL.name("nice_niceauthuserinfo_user_id_d21cbec3_uniq"), arrayOf(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO.USER_ID), true)
val REPORTS_CASTCOMMENTREPORT_PKEY: UniqueKey<ReportsCastcommentreportRecord> = Internal.createUniqueKey(ReportsCastcommentreport.REPORTS_CASTCOMMENTREPORT, DSL.name("reports_castcommentreport_pkey"), arrayOf(ReportsCastcommentreport.REPORTS_CASTCOMMENTREPORT.ID), true)
val REPORTS_CASTREPORT_PKEY: UniqueKey<ReportsCastreportRecord> = Internal.createUniqueKey(ReportsCastreport.REPORTS_CASTREPORT, DSL.name("reports_castreport_pkey"), arrayOf(ReportsCastreport.REPORTS_CASTREPORT.ID), true)
val REPORTS_LIVEMESSAGEREPORT_PKEY: UniqueKey<ReportsLivemessagereportRecord> = Internal.createUniqueKey(ReportsLivemessagereport.REPORTS_LIVEMESSAGEREPORT, DSL.name("reports_livemessagereport_pkey"), arrayOf(ReportsLivemessagereport.REPORTS_LIVEMESSAGEREPORT.ID), true)
val REPORTS_LIVEREPORT_PKEY: UniqueKey<ReportsLivereportRecord> = Internal.createUniqueKey(ReportsLivereport.REPORTS_LIVEREPORT, DSL.name("reports_livereport_pkey"), arrayOf(ReportsLivereport.REPORTS_LIVEREPORT.ID), true)
val PK_REPORTS_MAILBOXMESSAGEREPORT_ID: UniqueKey<ReportsMailboxmessagereportRecord> = Internal.createUniqueKey(ReportsMailboxmessagereport.REPORTS_MAILBOXMESSAGEREPORT, DSL.name("pk_reports_mailboxmessagereport_id"), arrayOf(ReportsMailboxmessagereport.REPORTS_MAILBOXMESSAGEREPORT.ID), true)
val REPORTS_TALKCOMMENTREPORT_PKEY: UniqueKey<ReportsTalkcommentreportRecord> = Internal.createUniqueKey(ReportsTalkcommentreport.REPORTS_TALKCOMMENTREPORT, DSL.name("reports_talkcommentreport_pkey"), arrayOf(ReportsTalkcommentreport.REPORTS_TALKCOMMENTREPORT.ID), true)
val REPORTS_TALKREPORT_PKEY: UniqueKey<ReportsTalkreportRecord> = Internal.createUniqueKey(ReportsTalkreport.REPORTS_TALKREPORT, DSL.name("reports_talkreport_pkey"), arrayOf(ReportsTalkreport.REPORTS_TALKREPORT.ID), true)
val REPORTS_USERREPORT_PKEY: UniqueKey<ReportsUserreportRecord> = Internal.createUniqueKey(ReportsUserreport.REPORTS_USERREPORT, DSL.name("reports_userreport_pkey"), arrayOf(ReportsUserreport.REPORTS_USERREPORT.ID), true)
val TALKS_TALK_PKEY: UniqueKey<TalksTalkRecord> = Internal.createUniqueKey(TalksTalk.TALKS_TALK, DSL.name("talks_talk_pkey"), arrayOf(TalksTalk.TALKS_TALK.ID), true)
val TALKS_TALKVOICECOMMENT_PKEY: UniqueKey<TalksTalkvoicecommentRecord> = Internal.createUniqueKey(TalksTalkvoicecomment.TALKS_TALKVOICECOMMENT, DSL.name("talks_talkvoicecomment_pkey"), arrayOf(TalksTalkvoicecomment.TALKS_TALKVOICECOMMENT.ID), true)
val USERS_ACCOUNT_PKEY: UniqueKey<UsersAccountRecord> = Internal.createUniqueKey(UsersAccount.USERS_ACCOUNT, DSL.name("users_account_pkey"), arrayOf(UsersAccount.USERS_ACCOUNT.ID), true)
val PK_USERS_AUTHORTIER: UniqueKey<UsersAuthortierRecord> = Internal.createUniqueKey(UsersAuthortier.USERS_AUTHORTIER, DSL.name("pk_users_authortier"), arrayOf(UsersAuthortier.USERS_AUTHORTIER.ID), true)
val UIDX_USERS_AUTHORTIER_NAME: UniqueKey<UsersAuthortierRecord> = Internal.createUniqueKey(UsersAuthortier.USERS_AUTHORTIER, DSL.name("uidx_users_authortier_name"), arrayOf(UsersAuthortier.USERS_AUTHORTIER.NAME), true)
val UIDX_USERS_AUTHORTIER_ORDER: UniqueKey<UsersAuthortierRecord> = Internal.createUniqueKey(UsersAuthortier.USERS_AUTHORTIER, DSL.name("uidx_users_authortier_order"), arrayOf(UsersAuthortier.USERS_AUTHORTIER.ORDER), true)
val PK_USERS_AUTHORTIERHISTORY: UniqueKey<UsersAuthortierhistoryRecord> = Internal.createUniqueKey(UsersAuthortierhistory.USERS_AUTHORTIERHISTORY, DSL.name("pk_users_authortierhistory"), arrayOf(UsersAuthortierhistory.USERS_AUTHORTIERHISTORY.ID), true)
val PK_USERS_AUTHORTIERUSER: UniqueKey<UsersAuthortieruserRecord> = Internal.createUniqueKey(UsersAuthortieruser.USERS_AUTHORTIERUSER, DSL.name("pk_users_authortieruser"), arrayOf(UsersAuthortieruser.USERS_AUTHORTIERUSER.ID), true)
val UIDX_USERS_AUTHORTIERUSER_USER_ID: UniqueKey<UsersAuthortieruserRecord> = Internal.createUniqueKey(UsersAuthortieruser.USERS_AUTHORTIERUSER, DSL.name("uidx_users_authortieruser_user_id"), arrayOf(UsersAuthortieruser.USERS_AUTHORTIERUSER.USER_ID), true)
val USERS_BAN_PKEY: UniqueKey<UsersBanRecord> = Internal.createUniqueKey(UsersBan.USERS_BAN, DSL.name("users_ban_pkey"), arrayOf(UsersBan.USERS_BAN.ID), true)
val USERS_BANCATEGORYCONTENT_PKEY: UniqueKey<UsersBancategorycontentRecord> = Internal.createUniqueKey(UsersBancategorycontent.USERS_BANCATEGORYCONTENT, DSL.name("users_bancategorycontent_pkey"), arrayOf(UsersBancategorycontent.USERS_BANCATEGORYCONTENT.ID), true)
val USERS_BANCATEGORYMAIN_PKEY: UniqueKey<UsersBancategorymainRecord> = Internal.createUniqueKey(UsersBancategorymain.USERS_BANCATEGORYMAIN, DSL.name("users_bancategorymain_pkey"), arrayOf(UsersBancategorymain.USERS_BANCATEGORYMAIN.ID), true)
val USERS_BANCATEGORYSUB_PKEY: UniqueKey<UsersBancategorysubRecord> = Internal.createUniqueKey(UsersBancategorysub.USERS_BANCATEGORYSUB, DSL.name("users_bancategorysub_pkey"), arrayOf(UsersBancategorysub.USERS_BANCATEGORYSUB.ID), true)
val USERS_DEVICE_PKEY: UniqueKey<UsersDeviceRecord> = Internal.createUniqueKey(UsersDevice.USERS_DEVICE, DSL.name("users_device_pkey"), arrayOf(UsersDevice.USERS_DEVICE.ID), true)
val USERS_FOLLOW_PKEY: UniqueKey<UsersFollowRecord> = Internal.createUniqueKey(UsersFollow.USERS_FOLLOW, DSL.name("users_follow_pkey"), arrayOf(UsersFollow.USERS_FOLLOW.ID), true)
val USERS_GRANT_PKEY: UniqueKey<UsersGrantRecord> = Internal.createUniqueKey(UsersGrant.USERS_GRANT, DSL.name("users_grant_pkey"), arrayOf(UsersGrant.USERS_GRANT.ID), true)
val USERS_PROFILE_PKEY: UniqueKey<UsersProfileRecord> = Internal.createUniqueKey(UsersProfile.USERS_PROFILE, DSL.name("users_profile_pkey"), arrayOf(UsersProfile.USERS_PROFILE.ID), true)
val USERS_PROFILE_TAG_KEY: UniqueKey<UsersProfileRecord> = Internal.createUniqueKey(UsersProfile.USERS_PROFILE, DSL.name("users_profile_tag_key"), arrayOf(UsersProfile.USERS_PROFILE.TAG), true)
val USERS_PROFILE_USER_ID_KEY: UniqueKey<UsersProfileRecord> = Internal.createUniqueKey(UsersProfile.USERS_PROFILE, DSL.name("users_profile_user_id_key"), arrayOf(UsersProfile.USERS_PROFILE.USER_ID), true)
val CONSTRAINT_5: UniqueKey<UsersSpoonuserRecord> = Internal.createUniqueKey(UsersSpoonuser.USERS_SPOONUSER, DSL.name("CONSTRAINT_5"), arrayOf(UsersSpoonuser.USERS_SPOONUSER.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_FK_USERS_SPOONUSER_ID: ForeignKey<NiceNiceauthuserinfoRecord, UsersSpoonuserRecord> = Internal.createForeignKey(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO, DSL.name("nice_niceauthuserinfo_user_id_d21cbec3_fk_users_spoonuser_id"), arrayOf(NiceNiceauthuserinfo.NICE_NICEAUTHUSERINFO.USER_ID), co.spoonradio.sims.repository.postgresql.keys.CONSTRAINT_5, arrayOf(UsersSpoonuser.USERS_SPOONUSER.ID), true)
val FK_USERS_AUTHORTIERHISTORY_TIER_ID: ForeignKey<UsersAuthortierhistoryRecord, UsersAuthortierRecord> = Internal.createForeignKey(UsersAuthortierhistory.USERS_AUTHORTIERHISTORY, DSL.name("fk_users_authortierhistory_tier_id"), arrayOf(UsersAuthortierhistory.USERS_AUTHORTIERHISTORY.TIER_ID), co.spoonradio.sims.repository.postgresql.keys.PK_USERS_AUTHORTIER, arrayOf(UsersAuthortier.USERS_AUTHORTIER.ID), true)
val FK_USERS_AUTHORTIERUSER_TIER_ID: ForeignKey<UsersAuthortieruserRecord, UsersAuthortierRecord> = Internal.createForeignKey(UsersAuthortieruser.USERS_AUTHORTIERUSER, DSL.name("fk_users_authortieruser_tier_id"), arrayOf(UsersAuthortieruser.USERS_AUTHORTIERUSER.TIER_ID), co.spoonradio.sims.repository.postgresql.keys.PK_USERS_AUTHORTIER, arrayOf(UsersAuthortier.USERS_AUTHORTIER.ID), true)
