/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.USERS_GRANT_PKEY
import co.spoonradio.sims.repository.postgresql.tables.records.UsersGrantRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersGrant(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersGrantRecord>?,
    aliased: Table<UsersGrantRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersGrantRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users_grant</code>
         */
        val USERS_GRANT = UsersGrant()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersGrantRecord> = UsersGrantRecord::class.java

    /**
     * The column <code>users_grant.id</code>.
     */
    val ID: TableField<UsersGrantRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users_grant.login</code>.
     */
    val LOGIN: TableField<UsersGrantRecord, Int?> = createField(DSL.name("login"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.cast</code>.
     */
    val CAST: TableField<UsersGrantRecord, Int?> = createField(DSL.name("cast"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.talk</code>.
     */
    val TALK: TableField<UsersGrantRecord, Int?> = createField(DSL.name("talk"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.live</code>.
     */
    val LIVE: TableField<UsersGrantRecord, Int?> = createField(DSL.name("live"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.adult</code>.
     */
    val ADULT: TableField<UsersGrantRecord, Int?> = createField(DSL.name("adult"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.updated</code>.
     */
    val UPDATED: TableField<UsersGrantRecord, OffsetDateTime?> = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>users_grant.phone</code>.
     */
    val PHONE: TableField<UsersGrantRecord, Int?> = createField(DSL.name("phone"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.payment</code>.
     */
    val PAYMENT: TableField<UsersGrantRecord, Int?> = createField(DSL.name("payment"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_grant.auth</code>.
     */
    val AUTH: TableField<UsersGrantRecord, Int?> = createField(DSL.name("auth"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<UsersGrantRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersGrantRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users_grant</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users_grant</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users_grant</code> table reference
     */
    constructor(): this(DSL.name("users_grant"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersGrantRecord>): this(Internal.createPathAlias(child, key), child, key, USERS_GRANT, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersGrantRecord, Int?> = super.getIdentity() as Identity<UsersGrantRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersGrantRecord> = USERS_GRANT_PKEY
    override fun getKeys(): List<UniqueKey<UsersGrantRecord>> = listOf(USERS_GRANT_PKEY)
    override fun `as`(alias: String): UsersGrant = UsersGrant(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersGrant = UsersGrant(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersGrant = UsersGrant(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersGrant = UsersGrant(name, null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?>
}
