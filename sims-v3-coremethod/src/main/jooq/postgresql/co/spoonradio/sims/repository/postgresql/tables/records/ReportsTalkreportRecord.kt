/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables.records


import co.spoonradio.sims.repository.postgresql.tables.ReportsTalkreport

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReportsTalkreportRecord() : UpdatableRecordImpl<ReportsTalkreportRecord>(ReportsTalkreport.REPORTS_TALKREPORT), Record8<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var reporter: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var reported: LocalDate?
        set(value) = set(2, value)
        get() = get(2) as LocalDate?

    var talk: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var talkAuthor: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var talkCreated: LocalDate?
        set(value) = set(5, value)
        get() = get(5) as LocalDate?

    var reportDescr: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var reportType: Int?
        set(value) = set(7, value)
        get() = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, Int?> = super.fieldsRow() as Row8<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, Int?>
    override fun valuesRow(): Row8<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, Int?> = super.valuesRow() as Row8<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, Int?>
    override fun field1(): Field<Int?> = ReportsTalkreport.REPORTS_TALKREPORT.ID
    override fun field2(): Field<String?> = ReportsTalkreport.REPORTS_TALKREPORT.REPORTER
    override fun field3(): Field<LocalDate?> = ReportsTalkreport.REPORTS_TALKREPORT.REPORTED
    override fun field4(): Field<String?> = ReportsTalkreport.REPORTS_TALKREPORT.TALK
    override fun field5(): Field<String?> = ReportsTalkreport.REPORTS_TALKREPORT.TALK_AUTHOR
    override fun field6(): Field<LocalDate?> = ReportsTalkreport.REPORTS_TALKREPORT.TALK_CREATED
    override fun field7(): Field<String?> = ReportsTalkreport.REPORTS_TALKREPORT.REPORT_DESCR
    override fun field8(): Field<Int?> = ReportsTalkreport.REPORTS_TALKREPORT.REPORT_TYPE
    override fun component1(): Int? = id
    override fun component2(): String? = reporter
    override fun component3(): LocalDate? = reported
    override fun component4(): String? = talk
    override fun component5(): String? = talkAuthor
    override fun component6(): LocalDate? = talkCreated
    override fun component7(): String? = reportDescr
    override fun component8(): Int? = reportType
    override fun value1(): Int? = id
    override fun value2(): String? = reporter
    override fun value3(): LocalDate? = reported
    override fun value4(): String? = talk
    override fun value5(): String? = talkAuthor
    override fun value6(): LocalDate? = talkCreated
    override fun value7(): String? = reportDescr
    override fun value8(): Int? = reportType

    override fun value1(value: Int?): ReportsTalkreportRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): ReportsTalkreportRecord {
        this.reporter = value
        return this
    }

    override fun value3(value: LocalDate?): ReportsTalkreportRecord {
        this.reported = value
        return this
    }

    override fun value4(value: String?): ReportsTalkreportRecord {
        this.talk = value
        return this
    }

    override fun value5(value: String?): ReportsTalkreportRecord {
        this.talkAuthor = value
        return this
    }

    override fun value6(value: LocalDate?): ReportsTalkreportRecord {
        this.talkCreated = value
        return this
    }

    override fun value7(value: String?): ReportsTalkreportRecord {
        this.reportDescr = value
        return this
    }

    override fun value8(value: Int?): ReportsTalkreportRecord {
        this.reportType = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: LocalDate?, value4: String?, value5: String?, value6: LocalDate?, value7: String?, value8: Int?): ReportsTalkreportRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised ReportsTalkreportRecord
     */
    constructor(id: Int? = null, reporter: String? = null, reported: LocalDate? = null, talk: String? = null, talkAuthor: String? = null, talkCreated: LocalDate? = null, reportDescr: String? = null, reportType: Int? = null): this() {
        this.id = id
        this.reporter = reporter
        this.reported = reported
        this.talk = talk
        this.talkAuthor = talkAuthor
        this.talkCreated = talkCreated
        this.reportDescr = reportDescr
        this.reportType = reportType
    }
}
