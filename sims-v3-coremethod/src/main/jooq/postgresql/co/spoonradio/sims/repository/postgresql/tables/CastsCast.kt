/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.CASTS_CAST_PKEY
import co.spoonradio.sims.repository.postgresql.tables.records.CastsCastRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CastsCast(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CastsCastRecord>?,
    aliased: Table<CastsCastRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CastsCastRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>casts_cast</code>
         */
        val CASTS_CAST = CastsCast()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CastsCastRecord> = CastsCastRecord::class.java

    /**
     * The column <code>casts_cast.id</code>.
     */
    val ID: TableField<CastsCastRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>casts_cast.title</code>.
     */
    val TITLE: TableField<CastsCastRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>casts_cast.interest</code>.
     */
    val INTEREST: TableField<CastsCastRecord, Int?> = createField(DSL.name("interest"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.tags</code>.
     */
    val TAGS: TableField<CastsCastRecord, Array<Any?>?> = createField(DSL.name("tags"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>casts_cast.img_key</code>.
     */
    val IMG_KEY: TableField<CastsCastRecord, String?> = createField(DSL.name("img_key"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>casts_cast.img_url</code>.
     */
    val IMG_URL: TableField<CastsCastRecord, String?> = createField(DSL.name("img_url"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>casts_cast.voice_key</code>.
     */
    val VOICE_KEY: TableField<CastsCastRecord, String?> = createField(DSL.name("voice_key"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>casts_cast.voice_url</code>.
     */
    val VOICE_URL: TableField<CastsCastRecord, String?> = createField(DSL.name("voice_url"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>casts_cast.duration</code>.
     */
    val DURATION: TableField<CastsCastRecord, Double?> = createField(DSL.name("duration"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>casts_cast.like_count</code>.
     */
    val LIKE_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("like_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.play_count</code>.
     */
    val PLAY_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("play_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.play_real_count</code>.
     */
    val PLAY_REAL_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("play_real_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.voice_comment_count</code>.
     */
    val VOICE_COMMENT_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("voice_comment_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.text_comment_count</code>.
     */
    val TEXT_COMMENT_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("text_comment_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.reporters</code>.
     */
    val REPORTERS: TableField<CastsCastRecord, Array<Any?>?> = createField(DSL.name("reporters"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>casts_cast.updated</code>.
     */
    val UPDATED: TableField<CastsCastRecord, OffsetDateTime?> = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>casts_cast.created</code>.
     */
    val CREATED: TableField<CastsCastRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>casts_cast.author_id</code>.
     */
    val AUTHOR_ID: TableField<CastsCastRecord, Int?> = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.company_id</code>.
     */
    val COMPANY_ID: TableField<CastsCastRecord, Int?> = createField(DSL.name("company_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>casts_cast.block_users</code>.
     */
    val BLOCK_USERS: TableField<CastsCastRecord, Array<Any?>?> = createField(DSL.name("block_users"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>casts_cast.is_donated</code>.
     */
    val IS_DONATED: TableField<CastsCastRecord, Boolean?> = createField(DSL.name("is_donated"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>casts_cast.spoon_count</code>.
     */
    val SPOON_COUNT: TableField<CastsCastRecord, Int?> = createField(DSL.name("spoon_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>casts_cast.status</code>.
     */
    val STATUS: TableField<CastsCastRecord, Int?> = createField(DSL.name("status"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>casts_cast.type</code>.
     */
    val TYPE: TableField<CastsCastRecord, Int?> = createField(DSL.name("type"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>casts_cast.category</code>.
     */
    val CATEGORY: TableField<CastsCastRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR(64), this, "")

    private constructor(alias: Name, aliased: Table<CastsCastRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CastsCastRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>casts_cast</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>casts_cast</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>casts_cast</code> table reference
     */
    constructor(): this(DSL.name("casts_cast"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CastsCastRecord>): this(Internal.createPathAlias(child, key), child, key, CASTS_CAST, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<CastsCastRecord, Int?> = super.getIdentity() as Identity<CastsCastRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CastsCastRecord> = CASTS_CAST_PKEY
    override fun getKeys(): List<UniqueKey<CastsCastRecord>> = listOf(CASTS_CAST_PKEY)
    override fun `as`(alias: String): CastsCast = CastsCast(DSL.name(alias), this)
    override fun `as`(alias: Name): CastsCast = CastsCast(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CastsCast = CastsCast(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CastsCast = CastsCast(name, null)
}
