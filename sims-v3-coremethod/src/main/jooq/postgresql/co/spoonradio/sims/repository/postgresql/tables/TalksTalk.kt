/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.TALKS_TALK_PKEY
import co.spoonradio.sims.repository.postgresql.tables.records.TalksTalkRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TalksTalk(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TalksTalkRecord>?,
    aliased: Table<TalksTalkRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TalksTalkRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>talks_talk</code>
         */
        val TALKS_TALK = TalksTalk()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TalksTalkRecord> = TalksTalkRecord::class.java

    /**
     * The column <code>talks_talk.id</code>.
     */
    val ID: TableField<TalksTalkRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>talks_talk.title</code>.
     */
    val TITLE: TableField<TalksTalkRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>talks_talk.img_key</code>.
     */
    val IMG_KEY: TableField<TalksTalkRecord, String?> = createField(DSL.name("img_key"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>talks_talk.img_url</code>.
     */
    val IMG_URL: TableField<TalksTalkRecord, String?> = createField(DSL.name("img_url"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>talks_talk.voice_comment_count</code>.
     */
    val VOICE_COMMENT_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("voice_comment_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>talks_talk.reporters</code>.
     */
    val REPORTERS: TableField<TalksTalkRecord, Array<Any?>?> = createField(DSL.name("reporters"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>talks_talk.member_count</code>.
     */
    val MEMBER_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("member_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>talks_talk.like_count</code>.
     */
    val LIKE_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("like_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>talks_talk.created</code>.
     */
    val CREATED: TableField<TalksTalkRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>talks_talk.author_id</code>.
     */
    val AUTHOR_ID: TableField<TalksTalkRecord, Int?> = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>talks_talk.block_users</code>.
     */
    val BLOCK_USERS: TableField<TalksTalkRecord, Array<Any?>?> = createField(DSL.name("block_users"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>talks_talk.banner_img_key</code>.
     */
    val BANNER_IMG_KEY: TableField<TalksTalkRecord, String?> = createField(DSL.name("banner_img_key"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>talks_talk.banner_img_url</code>.
     */
    val BANNER_IMG_URL: TableField<TalksTalkRecord, String?> = createField(DSL.name("banner_img_url"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>talks_talk.event_end</code>.
     */
    val EVENT_END: TableField<TalksTalkRecord, OffsetDateTime?> = createField(DSL.name("event_end"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>talks_talk.is_event</code>.
     */
    val IS_EVENT: TableField<TalksTalkRecord, Boolean?> = createField(DSL.name("is_event"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>talks_talk.comment_like_count</code>.
     */
    val COMMENT_LIKE_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("comment_like_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>talks_talk.expired</code>.
     */
    val EXPIRED: TableField<TalksTalkRecord, OffsetDateTime?> = createField(DSL.name("expired"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>talks_talk.is_private</code>.
     */
    val IS_PRIVATE: TableField<TalksTalkRecord, Boolean?> = createField(DSL.name("is_private"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>talks_talk.is_volatile</code>.
     */
    val IS_VOLATILE: TableField<TalksTalkRecord, Boolean?> = createField(DSL.name("is_volatile"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>talks_talk.text</code>.
     */
    val TEXT: TableField<TalksTalkRecord, String?> = createField(DSL.name("text"), SQLDataType.VARCHAR(500), this, "")

    /**
     * The column <code>talks_talk.is_composited</code>.
     */
    val IS_COMPOSITED: TableField<TalksTalkRecord, Boolean?> = createField(DSL.name("is_composited"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>talks_talk.comment_play_count</code>.
     */
    val COMMENT_PLAY_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("comment_play_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>talks_talk.enter_count</code>.
     */
    val ENTER_COUNT: TableField<TalksTalkRecord, Int?> = createField(DSL.name("enter_count"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>talks_talk.tags</code>.
     */
    val TAGS: TableField<TalksTalkRecord, Array<Any?>?> = createField(DSL.name("tags"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>talks_talk.status</code>.
     */
    val STATUS: TableField<TalksTalkRecord, Short?> = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.SMALLINT)), this, "")

    private constructor(alias: Name, aliased: Table<TalksTalkRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TalksTalkRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>talks_talk</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>talks_talk</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>talks_talk</code> table reference
     */
    constructor(): this(DSL.name("talks_talk"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TalksTalkRecord>): this(Internal.createPathAlias(child, key), child, key, TALKS_TALK, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<TalksTalkRecord, Int?> = super.getIdentity() as Identity<TalksTalkRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TalksTalkRecord> = TALKS_TALK_PKEY
    override fun getKeys(): List<UniqueKey<TalksTalkRecord>> = listOf(TALKS_TALK_PKEY)
    override fun `as`(alias: String): TalksTalk = TalksTalk(DSL.name(alias), this)
    override fun `as`(alias: Name): TalksTalk = TalksTalk(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TalksTalk = TalksTalk(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TalksTalk = TalksTalk(name, null)
}
