/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables.records


import co.spoonradio.sims.repository.postgresql.tables.FanboardFanmessage

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FanboardFanmessageRecord() : UpdatableRecordImpl<FanboardFanmessageRecord>(FanboardFanmessage.FANBOARD_FANMESSAGE), Record5<Int?, String?, OffsetDateTime?, Int?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var contents: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var created: OffsetDateTime?
        set(value) = set(2, value)
        get() = get(2) as OffsetDateTime?

    var authorId: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var commentId: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, String?, OffsetDateTime?, Int?, Int?> = super.fieldsRow() as Row5<Int?, String?, OffsetDateTime?, Int?, Int?>
    override fun valuesRow(): Row5<Int?, String?, OffsetDateTime?, Int?, Int?> = super.valuesRow() as Row5<Int?, String?, OffsetDateTime?, Int?, Int?>
    override fun field1(): Field<Int?> = FanboardFanmessage.FANBOARD_FANMESSAGE.ID
    override fun field2(): Field<String?> = FanboardFanmessage.FANBOARD_FANMESSAGE.CONTENTS
    override fun field3(): Field<OffsetDateTime?> = FanboardFanmessage.FANBOARD_FANMESSAGE.CREATED
    override fun field4(): Field<Int?> = FanboardFanmessage.FANBOARD_FANMESSAGE.AUTHOR_ID
    override fun field5(): Field<Int?> = FanboardFanmessage.FANBOARD_FANMESSAGE.COMMENT_ID
    override fun component1(): Int? = id
    override fun component2(): String? = contents
    override fun component3(): OffsetDateTime? = created
    override fun component4(): Int? = authorId
    override fun component5(): Int? = commentId
    override fun value1(): Int? = id
    override fun value2(): String? = contents
    override fun value3(): OffsetDateTime? = created
    override fun value4(): Int? = authorId
    override fun value5(): Int? = commentId

    override fun value1(value: Int?): FanboardFanmessageRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): FanboardFanmessageRecord {
        this.contents = value
        return this
    }

    override fun value3(value: OffsetDateTime?): FanboardFanmessageRecord {
        this.created = value
        return this
    }

    override fun value4(value: Int?): FanboardFanmessageRecord {
        this.authorId = value
        return this
    }

    override fun value5(value: Int?): FanboardFanmessageRecord {
        this.commentId = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: OffsetDateTime?, value4: Int?, value5: Int?): FanboardFanmessageRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised FanboardFanmessageRecord
     */
    constructor(id: Int? = null, contents: String? = null, created: OffsetDateTime? = null, authorId: Int? = null, commentId: Int? = null): this() {
        this.id = id
        this.contents = contents
        this.created = created
        this.authorId = authorId
        this.commentId = commentId
    }
}
