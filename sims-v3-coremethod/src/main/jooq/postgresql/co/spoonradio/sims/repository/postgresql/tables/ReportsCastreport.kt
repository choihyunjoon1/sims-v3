/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.REPORTS_CASTREPORT_PKEY
import co.spoonradio.sims.repository.postgresql.tables.records.ReportsCastreportRecord

import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReportsCastreport(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ReportsCastreportRecord>?,
    aliased: Table<ReportsCastreportRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ReportsCastreportRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>reports_castreport</code>
         */
        val REPORTS_CASTREPORT = ReportsCastreport()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReportsCastreportRecord> = ReportsCastreportRecord::class.java

    /**
     * The column <code>reports_castreport.id</code>.
     */
    val ID: TableField<ReportsCastreportRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>reports_castreport.reporter</code>.
     */
    val REPORTER: TableField<ReportsCastreportRecord, String?> = createField(DSL.name("reporter"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>reports_castreport.reported</code>.
     */
    val REPORTED: TableField<ReportsCastreportRecord, LocalDate?> = createField(DSL.name("reported"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>reports_castreport.cast</code>.
     */
    val CAST: TableField<ReportsCastreportRecord, String?> = createField(DSL.name("cast"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>reports_castreport.cast_author</code>.
     */
    val CAST_AUTHOR: TableField<ReportsCastreportRecord, String?> = createField(DSL.name("cast_author"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>reports_castreport.cast_created</code>.
     */
    val CAST_CREATED: TableField<ReportsCastreportRecord, LocalDate?> = createField(DSL.name("cast_created"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>reports_castreport.cast_url</code>.
     */
    val CAST_URL: TableField<ReportsCastreportRecord, String?> = createField(DSL.name("cast_url"), SQLDataType.VARCHAR(200), this, "")

    /**
     * The column <code>reports_castreport.report_descr</code>.
     */
    val REPORT_DESCR: TableField<ReportsCastreportRecord, String?> = createField(DSL.name("report_descr"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>reports_castreport.report_type</code>.
     */
    val REPORT_TYPE: TableField<ReportsCastreportRecord, Int?> = createField(DSL.name("report_type"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ReportsCastreportRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ReportsCastreportRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>reports_castreport</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>reports_castreport</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>reports_castreport</code> table reference
     */
    constructor(): this(DSL.name("reports_castreport"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ReportsCastreportRecord>): this(Internal.createPathAlias(child, key), child, key, REPORTS_CASTREPORT, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<ReportsCastreportRecord, Int?> = super.getIdentity() as Identity<ReportsCastreportRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ReportsCastreportRecord> = REPORTS_CASTREPORT_PKEY
    override fun getKeys(): List<UniqueKey<ReportsCastreportRecord>> = listOf(REPORTS_CASTREPORT_PKEY)
    override fun `as`(alias: String): ReportsCastreport = ReportsCastreport(DSL.name(alias), this)
    override fun `as`(alias: Name): ReportsCastreport = ReportsCastreport(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReportsCastreport = ReportsCastreport(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReportsCastreport = ReportsCastreport(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, String?, Int?> = super.fieldsRow() as Row9<Int?, String?, LocalDate?, String?, String?, LocalDate?, String?, String?, Int?>
}
