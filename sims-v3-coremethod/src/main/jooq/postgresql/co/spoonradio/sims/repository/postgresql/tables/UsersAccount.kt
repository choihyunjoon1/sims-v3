/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.USERS_ACCOUNT_PKEY
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAccountRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row15
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersAccount(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersAccountRecord>?,
    aliased: Table<UsersAccountRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersAccountRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users_account</code>
         */
        val USERS_ACCOUNT = UsersAccount()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersAccountRecord> = UsersAccountRecord::class.java

    /**
     * The column <code>users_account.id</code>.
     */
    val ID: TableField<UsersAccountRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users_account.sns_id</code>.
     */
    val SNS_ID: TableField<UsersAccountRecord, String?> = createField(DSL.name("sns_id"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.sns_type</code>.
     */
    val SNS_TYPE: TableField<UsersAccountRecord, String?> = createField(DSL.name("sns_type"), SQLDataType.VARCHAR(20), this, "")

    /**
     * The column <code>users_account.facebook</code>.
     */
    val FACEBOOK: TableField<UsersAccountRecord, String?> = createField(DSL.name("facebook"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.google</code>.
     */
    val GOOGLE: TableField<UsersAccountRecord, String?> = createField(DSL.name("google"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.email</code>.
     */
    val EMAIL: TableField<UsersAccountRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.phone</code>.
     */
    val PHONE: TableField<UsersAccountRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.country_prefix</code>.
     */
    val COUNTRY_PREFIX: TableField<UsersAccountRecord, String?> = createField(DSL.name("country_prefix"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.national_number</code>.
     */
    val NATIONAL_NUMBER: TableField<UsersAccountRecord, String?> = createField(DSL.name("national_number"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.created</code>.
     */
    val CREATED: TableField<UsersAccountRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>users_account.user_id</code>.
     */
    val USER_ID: TableField<UsersAccountRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_account.twitter</code>.
     */
    val TWITTER: TableField<UsersAccountRecord, String?> = createField(DSL.name("twitter"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.password</code>.
     */
    val PASSWORD: TableField<UsersAccountRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(128), this, "")

    /**
     * The column <code>users_account.apple</code>.
     */
    val APPLE: TableField<UsersAccountRecord, String?> = createField(DSL.name("apple"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_account.updated</code>.
     */
    val UPDATED: TableField<UsersAccountRecord, OffsetDateTime?> = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<UsersAccountRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersAccountRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users_account</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users_account</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users_account</code> table reference
     */
    constructor(): this(DSL.name("users_account"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersAccountRecord>): this(Internal.createPathAlias(child, key), child, key, USERS_ACCOUNT, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersAccountRecord, Int?> = super.getIdentity() as Identity<UsersAccountRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersAccountRecord> = USERS_ACCOUNT_PKEY
    override fun getKeys(): List<UniqueKey<UsersAccountRecord>> = listOf(USERS_ACCOUNT_PKEY)
    override fun `as`(alias: String): UsersAccount = UsersAccount(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersAccount = UsersAccount(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersAccount = UsersAccount(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersAccount = UsersAccount(name, null)

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<Int?, String?, String?, String?, String?, String?, String?, String?, String?, OffsetDateTime?, Int?, String?, String?, String?, OffsetDateTime?> = super.fieldsRow() as Row15<Int?, String?, String?, String?, String?, String?, String?, String?, String?, OffsetDateTime?, Int?, String?, String?, String?, OffsetDateTime?>
}
