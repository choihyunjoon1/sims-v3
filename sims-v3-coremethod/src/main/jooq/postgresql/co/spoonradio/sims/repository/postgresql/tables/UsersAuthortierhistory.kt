/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.FK_USERS_AUTHORTIERHISTORY_TIER_ID
import co.spoonradio.sims.repository.postgresql.keys.PK_USERS_AUTHORTIERHISTORY
import co.spoonradio.sims.repository.postgresql.tables.records.UsersAuthortierhistoryRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersAuthortierhistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersAuthortierhistoryRecord>?,
    aliased: Table<UsersAuthortierhistoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersAuthortierhistoryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users_authortierhistory</code>
         */
        val USERS_AUTHORTIERHISTORY = UsersAuthortierhistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersAuthortierhistoryRecord> = UsersAuthortierhistoryRecord::class.java

    /**
     * The column <code>users_authortierhistory.id</code>.
     */
    val ID: TableField<UsersAuthortierhistoryRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users_authortierhistory.title</code>.
     */
    val TITLE: TableField<UsersAuthortierhistoryRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>users_authortierhistory.user_ids</code>.
     */
    val USER_IDS: TableField<UsersAuthortierhistoryRecord, Array<Any?>?> = createField(DSL.name("user_ids"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>users_authortierhistory.is_used</code>.
     */
    val IS_USED: TableField<UsersAuthortierhistoryRecord, Boolean?> = createField(DSL.name("is_used"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>users_authortierhistory.created</code>.
     */
    val CREATED: TableField<UsersAuthortierhistoryRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>users_authortierhistory.tier_id</code>.
     */
    val TIER_ID: TableField<UsersAuthortierhistoryRecord, Int?> = createField(DSL.name("tier_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<UsersAuthortierhistoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersAuthortierhistoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users_authortierhistory</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users_authortierhistory</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users_authortierhistory</code> table reference
     */
    constructor(): this(DSL.name("users_authortierhistory"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersAuthortierhistoryRecord>): this(Internal.createPathAlias(child, key), child, key, USERS_AUTHORTIERHISTORY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersAuthortierhistoryRecord, Int?> = super.getIdentity() as Identity<UsersAuthortierhistoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersAuthortierhistoryRecord> = PK_USERS_AUTHORTIERHISTORY
    override fun getKeys(): List<UniqueKey<UsersAuthortierhistoryRecord>> = listOf(PK_USERS_AUTHORTIERHISTORY)
    override fun getReferences(): List<ForeignKey<UsersAuthortierhistoryRecord, *>> = listOf(FK_USERS_AUTHORTIERHISTORY_TIER_ID)

    private lateinit var _usersAuthortier: UsersAuthortier
    fun usersAuthortier(): UsersAuthortier {
        if (!this::_usersAuthortier.isInitialized)
            _usersAuthortier = UsersAuthortier(this, FK_USERS_AUTHORTIERHISTORY_TIER_ID)

        return _usersAuthortier;
    }
    override fun `as`(alias: String): UsersAuthortierhistory = UsersAuthortierhistory(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersAuthortierhistory = UsersAuthortierhistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersAuthortierhistory = UsersAuthortierhistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersAuthortierhistory = UsersAuthortierhistory(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, String?, Array<Any?>?, Boolean?, OffsetDateTime?, Int?> = super.fieldsRow() as Row6<Int?, String?, Array<Any?>?, Boolean?, OffsetDateTime?, Int?>
}
