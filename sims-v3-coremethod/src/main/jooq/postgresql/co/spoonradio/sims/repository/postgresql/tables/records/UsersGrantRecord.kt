/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables.records


import co.spoonradio.sims.repository.postgresql.tables.UsersGrant

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersGrantRecord() : UpdatableRecordImpl<UsersGrantRecord>(UsersGrant.USERS_GRANT), Record10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var login: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var cast: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var talk: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var live: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var adult: Int?
        set(value) = set(5, value)
        get() = get(5) as Int?

    var updated: OffsetDateTime?
        set(value) = set(6, value)
        get() = get(6) as OffsetDateTime?

    var phone: Int?
        set(value) = set(7, value)
        get() = get(7) as Int?

    var payment: Int?
        set(value) = set(8, value)
        get() = get(8) as Int?

    var auth: Int?
        set(value) = set(9, value)
        get() = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?> = super.fieldsRow() as Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?>
    override fun valuesRow(): Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?> = super.valuesRow() as Row10<Int?, Int?, Int?, Int?, Int?, Int?, OffsetDateTime?, Int?, Int?, Int?>
    override fun field1(): Field<Int?> = UsersGrant.USERS_GRANT.ID
    override fun field2(): Field<Int?> = UsersGrant.USERS_GRANT.LOGIN
    override fun field3(): Field<Int?> = UsersGrant.USERS_GRANT.CAST
    override fun field4(): Field<Int?> = UsersGrant.USERS_GRANT.TALK
    override fun field5(): Field<Int?> = UsersGrant.USERS_GRANT.LIVE
    override fun field6(): Field<Int?> = UsersGrant.USERS_GRANT.ADULT
    override fun field7(): Field<OffsetDateTime?> = UsersGrant.USERS_GRANT.UPDATED
    override fun field8(): Field<Int?> = UsersGrant.USERS_GRANT.PHONE
    override fun field9(): Field<Int?> = UsersGrant.USERS_GRANT.PAYMENT
    override fun field10(): Field<Int?> = UsersGrant.USERS_GRANT.AUTH
    override fun component1(): Int? = id
    override fun component2(): Int? = login
    override fun component3(): Int? = cast
    override fun component4(): Int? = talk
    override fun component5(): Int? = live
    override fun component6(): Int? = adult
    override fun component7(): OffsetDateTime? = updated
    override fun component8(): Int? = phone
    override fun component9(): Int? = payment
    override fun component10(): Int? = auth
    override fun value1(): Int? = id
    override fun value2(): Int? = login
    override fun value3(): Int? = cast
    override fun value4(): Int? = talk
    override fun value5(): Int? = live
    override fun value6(): Int? = adult
    override fun value7(): OffsetDateTime? = updated
    override fun value8(): Int? = phone
    override fun value9(): Int? = payment
    override fun value10(): Int? = auth

    override fun value1(value: Int?): UsersGrantRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): UsersGrantRecord {
        this.login = value
        return this
    }

    override fun value3(value: Int?): UsersGrantRecord {
        this.cast = value
        return this
    }

    override fun value4(value: Int?): UsersGrantRecord {
        this.talk = value
        return this
    }

    override fun value5(value: Int?): UsersGrantRecord {
        this.live = value
        return this
    }

    override fun value6(value: Int?): UsersGrantRecord {
        this.adult = value
        return this
    }

    override fun value7(value: OffsetDateTime?): UsersGrantRecord {
        this.updated = value
        return this
    }

    override fun value8(value: Int?): UsersGrantRecord {
        this.phone = value
        return this
    }

    override fun value9(value: Int?): UsersGrantRecord {
        this.payment = value
        return this
    }

    override fun value10(value: Int?): UsersGrantRecord {
        this.auth = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: Int?, value6: Int?, value7: OffsetDateTime?, value8: Int?, value9: Int?, value10: Int?): UsersGrantRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised UsersGrantRecord
     */
    constructor(id: Int? = null, login: Int? = null, cast: Int? = null, talk: Int? = null, live: Int? = null, adult: Int? = null, updated: OffsetDateTime? = null, phone: Int? = null, payment: Int? = null, auth: Int? = null): this() {
        this.id = id
        this.login = login
        this.cast = cast
        this.talk = talk
        this.live = live
        this.adult = adult
        this.updated = updated
        this.phone = phone
        this.payment = payment
        this.auth = auth
    }
}
