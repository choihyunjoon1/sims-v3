/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.USERS_PROFILE_PKEY
import co.spoonradio.sims.repository.postgresql.keys.USERS_PROFILE_TAG_KEY
import co.spoonradio.sims.repository.postgresql.keys.USERS_PROFILE_USER_ID_KEY
import co.spoonradio.sims.repository.postgresql.tables.records.UsersProfileRecord

import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row22
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersProfile(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersProfileRecord>?,
    aliased: Table<UsersProfileRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersProfileRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users_profile</code>
         */
        val USERS_PROFILE = UsersProfile()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersProfileRecord> = UsersProfileRecord::class.java

    /**
     * The column <code>users_profile.id</code>.
     */
    val ID: TableField<UsersProfileRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users_profile.nickname</code>.
     */
    val NICKNAME: TableField<UsersProfileRecord, String?> = createField(DSL.name("nickname"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>users_profile.tag</code>.
     */
    val TAG: TableField<UsersProfileRecord, String?> = createField(DSL.name("tag"), SQLDataType.VARCHAR(15), this, "")

    /**
     * The column <code>users_profile.description</code>.
     */
    val DESCRIPTION: TableField<UsersProfileRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>users_profile.gender</code>.
     */
    val GENDER: TableField<UsersProfileRecord, Int?> = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_profile.date_of_birth</code>.
     */
    val DATE_OF_BIRTH: TableField<UsersProfileRecord, LocalDate?> = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>users_profile.profile_url</code>.
     */
    val PROFILE_URL: TableField<UsersProfileRecord, String?> = createField(DSL.name("profile_url"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>users_profile.profile_key</code>.
     */
    val PROFILE_KEY: TableField<UsersProfileRecord, String?> = createField(DSL.name("profile_key"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>users_profile.reporters</code>.
     */
    val REPORTERS: TableField<UsersProfileRecord, Array<Any?>?> = createField(DSL.name("reporters"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>users_profile.top_impressions</code>.
     */
    val TOP_IMPRESSIONS: TableField<UsersProfileRecord, Array<Any?>?> = createField(DSL.name("top_impressions"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>users_profile.is_live</code>.
     */
    val IS_LIVE: TableField<UsersProfileRecord, Boolean?> = createField(DSL.name("is_live"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>users_profile.fan_count</code>.
     */
    val FAN_COUNT: TableField<UsersProfileRecord, Int?> = createField(DSL.name("fan_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_profile.my_count</code>.
     */
    val MY_COUNT: TableField<UsersProfileRecord, Int?> = createField(DSL.name("my_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_profile.current_live_id</code>.
     */
    val CURRENT_LIVE_ID: TableField<UsersProfileRecord, Int?> = createField(DSL.name("current_live_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>users_profile.last_live_created</code>.
     */
    val LAST_LIVE_CREATED: TableField<UsersProfileRecord, OffsetDateTime?> = createField(DSL.name("last_live_created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>users_profile.created</code>.
     */
    val CREATED: TableField<UsersProfileRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>users_profile.user_id</code>.
     */
    val USER_ID: TableField<UsersProfileRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users_profile.country</code>.
     */
    val COUNTRY: TableField<UsersProfileRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(4), this, "")

    /**
     * The column <code>users_profile.is_public_cast_storage</code>.
     */
    val IS_PUBLIC_CAST_STORAGE: TableField<UsersProfileRecord, Boolean?> = createField(DSL.name("is_public_cast_storage"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>users_profile.is_public_like</code>.
     */
    val IS_PUBLIC_LIKE: TableField<UsersProfileRecord, Boolean?> = createField(DSL.name("is_public_like"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>users_profile.is_vip</code>.
     */
    val IS_VIP: TableField<UsersProfileRecord, Boolean?> = createField(DSL.name("is_vip"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>users_profile.verify_status</code>.
     */
    val VERIFY_STATUS: TableField<UsersProfileRecord, Short?> = createField(DSL.name("verify_status"), SQLDataType.SMALLINT, this, "")

    private constructor(alias: Name, aliased: Table<UsersProfileRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersProfileRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users_profile</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users_profile</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users_profile</code> table reference
     */
    constructor(): this(DSL.name("users_profile"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersProfileRecord>): this(Internal.createPathAlias(child, key), child, key, USERS_PROFILE, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersProfileRecord, Int?> = super.getIdentity() as Identity<UsersProfileRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersProfileRecord> = USERS_PROFILE_PKEY
    override fun getKeys(): List<UniqueKey<UsersProfileRecord>> = listOf(USERS_PROFILE_PKEY, USERS_PROFILE_TAG_KEY, USERS_PROFILE_USER_ID_KEY)
    override fun `as`(alias: String): UsersProfile = UsersProfile(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersProfile = UsersProfile(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersProfile = UsersProfile(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersProfile = UsersProfile(name, null)

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row22<Int?, String?, String?, String?, Int?, LocalDate?, String?, String?, Array<Any?>?, Array<Any?>?, Boolean?, Int?, Int?, Int?, OffsetDateTime?, OffsetDateTime?, Int?, String?, Boolean?, Boolean?, Boolean?, Short?> = super.fieldsRow() as Row22<Int?, String?, String?, String?, Int?, LocalDate?, String?, String?, Array<Any?>?, Array<Any?>?, Boolean?, Int?, Int?, Int?, OffsetDateTime?, OffsetDateTime?, Int?, String?, Boolean?, Boolean?, Boolean?, Short?>
}
