/*
 * This file is generated by jOOQ.
 */
package co.spoonradio.sims.repository.postgresql.tables


import co.spoonradio.sims.repository.postgresql.DefaultSchema
import co.spoonradio.sims.repository.postgresql.keys.NICE_NICEAUTHUSERINFO_PKEY
import co.spoonradio.sims.repository.postgresql.keys.NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_FK_USERS_SPOONUSER_ID
import co.spoonradio.sims.repository.postgresql.keys.NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_UNIQ
import co.spoonradio.sims.repository.postgresql.tables.records.NiceNiceauthuserinfoRecord

import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NiceNiceauthuserinfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, NiceNiceauthuserinfoRecord>?,
    aliased: Table<NiceNiceauthuserinfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<NiceNiceauthuserinfoRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>nice_niceauthuserinfo</code>
         */
        val NICE_NICEAUTHUSERINFO = NiceNiceauthuserinfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<NiceNiceauthuserinfoRecord> = NiceNiceauthuserinfoRecord::class.java

    /**
     * The column <code>nice_niceauthuserinfo.id</code>.
     */
    val ID: TableField<NiceNiceauthuserinfoRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.name</code>.
     */
    val NAME: TableField<NiceNiceauthuserinfoRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.gender</code>.
     */
    val GENDER: TableField<NiceNiceauthuserinfoRecord, Int?> = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.birth_date</code>.
     */
    val BIRTH_DATE: TableField<NiceNiceauthuserinfoRecord, LocalDate?> = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>nice_niceauthuserinfo.nation_info</code>.
     */
    val NATION_INFO: TableField<NiceNiceauthuserinfoRecord, Int?> = createField(DSL.name("nation_info"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.created</code>.
     */
    val CREATED: TableField<NiceNiceauthuserinfoRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.user_id</code>.
     */
    val USER_ID: TableField<NiceNiceauthuserinfoRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>nice_niceauthuserinfo.ci</code>.
     */
    val CI: TableField<NiceNiceauthuserinfoRecord, String?> = createField(DSL.name("ci"), SQLDataType.VARCHAR(100), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.auth_type</code>.
     */
    val AUTH_TYPE: TableField<NiceNiceauthuserinfoRecord, String?> = createField(DSL.name("auth_type"), SQLDataType.VARCHAR(1), this, "")

    /**
     * The column <code>nice_niceauthuserinfo.virtual_number</code>.
     */
    val VIRTUAL_NUMBER: TableField<NiceNiceauthuserinfoRecord, String?> = createField(DSL.name("virtual_number"), SQLDataType.VARCHAR(100), this, "")

    private constructor(alias: Name, aliased: Table<NiceNiceauthuserinfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<NiceNiceauthuserinfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>nice_niceauthuserinfo</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>nice_niceauthuserinfo</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>nice_niceauthuserinfo</code> table reference
     */
    constructor(): this(DSL.name("nice_niceauthuserinfo"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, NiceNiceauthuserinfoRecord>): this(Internal.createPathAlias(child, key), child, key, NICE_NICEAUTHUSERINFO, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<NiceNiceauthuserinfoRecord, Int?> = super.getIdentity() as Identity<NiceNiceauthuserinfoRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<NiceNiceauthuserinfoRecord> = NICE_NICEAUTHUSERINFO_PKEY
    override fun getKeys(): List<UniqueKey<NiceNiceauthuserinfoRecord>> = listOf(NICE_NICEAUTHUSERINFO_PKEY, NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_UNIQ)
    override fun getReferences(): List<ForeignKey<NiceNiceauthuserinfoRecord, *>> = listOf(NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_FK_USERS_SPOONUSER_ID)

    private lateinit var _usersSpoonuser: UsersSpoonuser
    fun usersSpoonuser(): UsersSpoonuser {
        if (!this::_usersSpoonuser.isInitialized)
            _usersSpoonuser = UsersSpoonuser(this, NICE_NICEAUTHUSERINFO_USER_ID_D21CBEC3_FK_USERS_SPOONUSER_ID)

        return _usersSpoonuser;
    }
    override fun `as`(alias: String): NiceNiceauthuserinfo = NiceNiceauthuserinfo(DSL.name(alias), this)
    override fun `as`(alias: Name): NiceNiceauthuserinfo = NiceNiceauthuserinfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): NiceNiceauthuserinfo = NiceNiceauthuserinfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): NiceNiceauthuserinfo = NiceNiceauthuserinfo(name, null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Int?, String?, Int?, LocalDate?, Int?, OffsetDateTime?, Int?, String?, String?, String?> = super.fieldsRow() as Row10<Int?, String?, Int?, LocalDate?, Int?, OffsetDateTime?, Int?, String?, String?, String?>
}
